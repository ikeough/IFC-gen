scalar StrippedOptional
scalar AbsorbedDoseMeasure
scalar AccelerationMeasure
scalar AmountOfSubstanceMeasure
scalar AngularVelocityMeasure
scalar ArcIndex
scalar AreaDensityMeasure
scalar AreaMeasure
scalar Binary
scalar Boolean
scalar BoxAlignment
scalar CardinalPointReference
scalar ComplexNumber
scalar CompoundPlaneAngleMeasure
scalar ContextDependentMeasure
scalar CountMeasure
scalar CurvatureMeasure
scalar Date
scalar DateTime
scalar DayInMonthNumber
scalar DayInWeekNumber
scalar DescriptiveMeasure
scalar DimensionCount
scalar DoseEquivalentMeasure
scalar Duration
scalar DynamicViscosityMeasure
scalar ElectricCapacitanceMeasure
scalar ElectricChargeMeasure
scalar ElectricConductanceMeasure
scalar ElectricCurrentMeasure
scalar ElectricResistanceMeasure
scalar ElectricVoltageMeasure
scalar EnergyMeasure
scalar FontStyle
scalar FontVariant
scalar FontWeight
scalar ForceMeasure
scalar FrequencyMeasure
scalar GloballyUniqueId
scalar HeatFluxDensityMeasure
scalar HeatingValueMeasure
scalar Identifier
scalar IlluminanceMeasure
scalar InductanceMeasure
scalar Integer
scalar IntegerCountRateMeasure
scalar IonConcentrationMeasure
scalar IsothermalMoistureCapacityMeasure
scalar KinematicViscosityMeasure
scalar Label
scalar LanguageId
scalar LengthMeasure
scalar LineIndex
scalar LinearForceMeasure
scalar LinearMomentMeasure
scalar LinearStiffnessMeasure
scalar LinearVelocityMeasure
scalar Logical
scalar LuminousFluxMeasure
scalar LuminousIntensityDistributionMeasure
scalar LuminousIntensityMeasure
scalar MagneticFluxDensityMeasure
scalar MagneticFluxMeasure
scalar MassDensityMeasure
scalar MassFlowRateMeasure
scalar MassMeasure
scalar MassPerLengthMeasure
scalar ModulusOfElasticityMeasure
scalar ModulusOfLinearSubgradeReactionMeasure
scalar ModulusOfRotationalSubgradeReactionMeasure
scalar ModulusOfSubgradeReactionMeasure
scalar MoistureDiffusivityMeasure
scalar MolecularWeightMeasure
scalar MomentOfInertiaMeasure
scalar MonetaryMeasure
scalar MonthInYearNumber
scalar NonNegativeLengthMeasure
scalar NormalisedRatioMeasure
scalar NumericMeasure
scalar PHMeasure
scalar ParameterValue
scalar PlanarForceMeasure
scalar PlaneAngleMeasure
scalar PositiveInteger
scalar PositiveLengthMeasure
scalar PositivePlaneAngleMeasure
scalar PositiveRatioMeasure
scalar PowerMeasure
scalar PresentableText
scalar PressureMeasure
scalar PropertySetDefinitionSet
scalar RadioActivityMeasure
scalar RatioMeasure
scalar Real
scalar RotationalFrequencyMeasure
scalar RotationalMassMeasure
scalar RotationalStiffnessMeasure
scalar SectionModulusMeasure
scalar SectionalAreaIntegralMeasure
scalar ShearModulusMeasure
scalar SolidAngleMeasure
scalar SoundPowerLevelMeasure
scalar SoundPowerMeasure
scalar SoundPressureLevelMeasure
scalar SoundPressureMeasure
scalar SpecificHeatCapacityMeasure
scalar SpecularExponent
scalar SpecularRoughness
scalar TemperatureGradientMeasure
scalar TemperatureRateOfChangeMeasure
scalar Text
scalar TextAlignment
scalar TextDecoration
scalar TextFontName
scalar TextTransformation
scalar ThermalAdmittanceMeasure
scalar ThermalConductivityMeasure
scalar ThermalExpansionCoefficientMeasure
scalar ThermalResistanceMeasure
scalar ThermalTransmittanceMeasure
scalar ThermodynamicTemperatureMeasure
scalar Time
scalar TimeMeasure
scalar TimeStamp
scalar TorqueMeasure
scalar URIReference
scalar VaporPermeabilityMeasure
scalar VolumeMeasure
scalar VolumetricFlowRateMeasure
scalar WarpingConstantMeasure
scalar WarpingMomentMeasure

enum ActionRequestType {
	EMAIL
	FAX
	PHONE
	POST
	VERBAL
	USERDEFINED
	NOTDEFINED
}
enum ActionSourceType {
	DEAD_LOAD_G
	COMPLETION_G1
	LIVE_LOAD_Q
	SNOW_S
	WIND_W
	PRESTRESSING_P
	SETTLEMENT_U
	TEMPERATURE_T
	EARTHQUAKE_E
	FIRE
	IMPULSE
	IMPACT
	TRANSPORT
	ERECTION
	PROPPING
	SYSTEM_IMPERFECTION
	SHRINKAGE
	CREEP
	LACK_OF_FIT
	BUOYANCY
	ICE
	CURRENT
	WAVE
	RAIN
	BRAKES
	USERDEFINED
	NOTDEFINED
}
enum ActionType {
	PERMANENT_G
	VARIABLE_Q
	EXTRAORDINARY_A
	USERDEFINED
	NOTDEFINED
}
enum ActuatorType {
	ELECTRICACTUATOR
	HANDOPERATEDACTUATOR
	HYDRAULICACTUATOR
	PNEUMATICACTUATOR
	THERMOSTATICACTUATOR
	USERDEFINED
	NOTDEFINED
}
enum AddressType {
	OFFICE
	SITE
	HOME
	DISTRIBUTIONPOINT
	USERDEFINED
}
enum AirTerminalBoxType {
	CONSTANTFLOW
	VARIABLEFLOWPRESSUREDEPENDANT
	VARIABLEFLOWPRESSUREINDEPENDANT
	USERDEFINED
	NOTDEFINED
}
enum AirTerminalType {
	DIFFUSER
	GRILLE
	LOUVRE
	REGISTER
	USERDEFINED
	NOTDEFINED
}
enum AirToAirHeatRecoveryType {
	FIXEDPLATECOUNTERFLOWEXCHANGER
	FIXEDPLATECROSSFLOWEXCHANGER
	FIXEDPLATEPARALLELFLOWEXCHANGER
	ROTARYWHEEL
	RUNAROUNDCOILLOOP
	HEATPIPE
	TWINTOWERENTHALPYRECOVERYLOOPS
	THERMOSIPHONSEALEDTUBEHEATEXCHANGERS
	THERMOSIPHONCOILTYPEHEATEXCHANGERS
	USERDEFINED
	NOTDEFINED
}
enum AlarmType {
	BELL
	BREAKGLASSBUTTON
	LIGHT
	MANUALPULLBOX
	SIREN
	WHISTLE
	USERDEFINED
	NOTDEFINED
}
enum AnalysisModelType {
	IN_PLANE_LOADING_2D
	OUT_PLANE_LOADING_2D
	LOADING_3D
	USERDEFINED
	NOTDEFINED
}
enum AnalysisTheoryType {
	FIRST_ORDER_THEORY
	SECOND_ORDER_THEORY
	THIRD_ORDER_THEORY
	FULL_NONLINEAR_THEORY
	USERDEFINED
	NOTDEFINED
}
enum ArithmeticOperator {
	ADD
	DIVIDE
	MULTIPLY
	SUBTRACT
}
enum AssemblyPlace {
	SITE
	FACTORY
	NOTDEFINED
}
enum AudioVisualApplianceType {
	AMPLIFIER
	CAMERA
	DISPLAY
	MICROPHONE
	PLAYER
	PROJECTOR
	RECEIVER
	SPEAKER
	SWITCHER
	TELEPHONE
	TUNER
	USERDEFINED
	NOTDEFINED
}
enum BSplineCurveForm {
	POLYLINE_FORM
	CIRCULAR_ARC
	ELLIPTIC_ARC
	PARABOLIC_ARC
	HYPERBOLIC_ARC
	UNSPECIFIED
}
enum BSplineSurfaceForm {
	PLANE_SURF
	CYLINDRICAL_SURF
	CONICAL_SURF
	SPHERICAL_SURF
	TOROIDAL_SURF
	SURF_OF_REVOLUTION
	RULED_SURF
	GENERALISED_CONE
	QUADRIC_SURF
	SURF_OF_LINEAR_EXTRUSION
	UNSPECIFIED
}
enum BeamType {
	BEAM
	JOIST
	HOLLOWCORE
	LINTEL
	SPANDREL
	T_BEAM
	USERDEFINED
	NOTDEFINED
}
enum Benchmark {
	GREATERTHAN
	GREATERTHANOREQUALTO
	LESSTHAN
	LESSTHANOREQUALTO
	EQUALTO
	NOTEQUALTO
	INCLUDES
	NOTINCLUDES
	INCLUDEDIN
	NOTINCLUDEDIN
}
enum BoilerType {
	WATER
	STEAM
	USERDEFINED
	NOTDEFINED
}
enum BooleanOperator {
	UNION
	INTERSECTION
	DIFFERENCE
}
enum BuildingElementPartType {
	INSULATION
	PRECASTPANEL
	USERDEFINED
	NOTDEFINED
}
enum BuildingElementProxyType {
	COMPLEX
	ELEMENT
	PARTIAL
	PROVISIONFORVOID
	PROVISIONFORSPACE
	USERDEFINED
	NOTDEFINED
}
enum BuildingSystemType {
	FENESTRATION
	FOUNDATION
	LOADBEARING
	OUTERSHELL
	SHADING
	TRANSPORT
	USERDEFINED
	NOTDEFINED
}
enum BurnerType {
	USERDEFINED
	NOTDEFINED
}
enum CableCarrierFittingType {
	BEND
	CROSS
	REDUCER
	TEE
	USERDEFINED
	NOTDEFINED
}
enum CableCarrierSegmentType {
	CABLELADDERSEGMENT
	CABLETRAYSEGMENT
	CABLETRUNKINGSEGMENT
	CONDUITSEGMENT
	USERDEFINED
	NOTDEFINED
}
enum CableFittingType {
	CONNECTOR
	ENTRY
	EXIT
	JUNCTION
	TRANSITION
	USERDEFINED
	NOTDEFINED
}
enum CableSegmentType {
	BUSBARSEGMENT
	CABLESEGMENT
	CONDUCTORSEGMENT
	CORESEGMENT
	USERDEFINED
	NOTDEFINED
}
enum ChangeAction {
	NOCHANGE
	MODIFIED
	ADDED
	DELETED
	NOTDEFINED
}
enum ChillerType {
	AIRCOOLED
	WATERCOOLED
	HEATRECOVERY
	USERDEFINED
	NOTDEFINED
}
enum ChimneyType {
	USERDEFINED
	NOTDEFINED
}
enum CoilType {
	DXCOOLINGCOIL
	ELECTRICHEATINGCOIL
	GASHEATINGCOIL
	HYDRONICCOIL
	STEAMHEATINGCOIL
	WATERCOOLINGCOIL
	WATERHEATINGCOIL
	USERDEFINED
	NOTDEFINED
}
enum ColumnType {
	COLUMN
	PILASTER
	USERDEFINED
	NOTDEFINED
}
enum CommunicationsApplianceType {
	ANTENNA
	COMPUTER
	FAX
	GATEWAY
	MODEM
	NETWORKAPPLIANCE
	NETWORKBRIDGE
	NETWORKHUB
	PRINTER
	REPEATER
	ROUTER
	SCANNER
	USERDEFINED
	NOTDEFINED
}
enum ComplexPropertyTemplateType {
	P_COMPLEX
	Q_COMPLEX
}
enum CompressorType {
	DYNAMIC
	RECIPROCATING
	ROTARY
	SCROLL
	TROCHOIDAL
	SINGLESTAGE
	BOOSTER
	OPENTYPE
	HERMETIC
	SEMIHERMETIC
	WELDEDSHELLHERMETIC
	ROLLINGPISTON
	ROTARYVANE
	SINGLESCREW
	TWINSCREW
	USERDEFINED
	NOTDEFINED
}
enum CondenserType {
	AIRCOOLED
	EVAPORATIVECOOLED
	WATERCOOLED
	WATERCOOLEDBRAZEDPLATE
	WATERCOOLEDSHELLCOIL
	WATERCOOLEDSHELLTUBE
	WATERCOOLEDTUBEINTUBE
	USERDEFINED
	NOTDEFINED
}
enum ConnectionType {
	ATPATH
	ATSTART
	ATEND
	NOTDEFINED
}
enum Constraint {
	HARD
	SOFT
	ADVISORY
	USERDEFINED
	NOTDEFINED
}
enum ConstructionEquipmentResourceType {
	DEMOLISHING
	EARTHMOVING
	ERECTING
	HEATING
	LIGHTING
	PAVING
	PUMPING
	TRANSPORTING
	USERDEFINED
	NOTDEFINED
}
enum ConstructionMaterialResourceType {
	AGGREGATES
	CONCRETE
	DRYWALL
	FUEL
	GYPSUM
	MASONRY
	METAL
	PLASTIC
	WOOD
	NOTDEFINED
	USERDEFINED
}
enum ConstructionProductResourceType {
	ASSEMBLY
	FORMWORK
	USERDEFINED
	NOTDEFINED
}
enum ControllerType {
	FLOATING
	PROGRAMMABLE
	PROPORTIONAL
	MULTIPOSITION
	TWOPOSITION
	USERDEFINED
	NOTDEFINED
}
enum CooledBeamType {
	ACTIVE
	PASSIVE
	USERDEFINED
	NOTDEFINED
}
enum CoolingTowerType {
	NATURALDRAFT
	MECHANICALINDUCEDDRAFT
	MECHANICALFORCEDDRAFT
	USERDEFINED
	NOTDEFINED
}
enum CostItemType {
	USERDEFINED
	NOTDEFINED
}
enum CostScheduleType {
	BUDGET
	COSTPLAN
	ESTIMATE
	TENDER
	PRICEDBILLOFQUANTITIES
	UNPRICEDBILLOFQUANTITIES
	SCHEDULEOFRATES
	USERDEFINED
	NOTDEFINED
}
enum CoveringType {
	CEILING
	FLOORING
	CLADDING
	ROOFING
	MOLDING
	SKIRTINGBOARD
	INSULATION
	MEMBRANE
	SLEEVING
	WRAPPING
	USERDEFINED
	NOTDEFINED
}
enum CrewResourceType {
	OFFICE
	SITE
	USERDEFINED
	NOTDEFINED
}
enum CurtainWallType {
	USERDEFINED
	NOTDEFINED
}
enum CurveInterpolation {
	LINEAR
	LOG_LINEAR
	LOG_LOG
	NOTDEFINED
}
enum DamperType {
	BACKDRAFTDAMPER
	BALANCINGDAMPER
	BLASTDAMPER
	CONTROLDAMPER
	FIREDAMPER
	FIRESMOKEDAMPER
	FUMEHOODEXHAUST
	GRAVITYDAMPER
	GRAVITYRELIEFDAMPER
	RELIEFDAMPER
	SMOKEDAMPER
	USERDEFINED
	NOTDEFINED
}
enum DataOrigin {
	MEASURED
	PREDICTED
	SIMULATED
	USERDEFINED
	NOTDEFINED
}
enum DerivedUnit {
	ANGULARVELOCITYUNIT
	AREADENSITYUNIT
	COMPOUNDPLANEANGLEUNIT
	DYNAMICVISCOSITYUNIT
	HEATFLUXDENSITYUNIT
	INTEGERCOUNTRATEUNIT
	ISOTHERMALMOISTURECAPACITYUNIT
	KINEMATICVISCOSITYUNIT
	LINEARVELOCITYUNIT
	MASSDENSITYUNIT
	MASSFLOWRATEUNIT
	MOISTUREDIFFUSIVITYUNIT
	MOLECULARWEIGHTUNIT
	SPECIFICHEATCAPACITYUNIT
	THERMALADMITTANCEUNIT
	THERMALCONDUCTANCEUNIT
	THERMALRESISTANCEUNIT
	THERMALTRANSMITTANCEUNIT
	VAPORPERMEABILITYUNIT
	VOLUMETRICFLOWRATEUNIT
	ROTATIONALFREQUENCYUNIT
	TORQUEUNIT
	MOMENTOFINERTIAUNIT
	LINEARMOMENTUNIT
	LINEARFORCEUNIT
	PLANARFORCEUNIT
	MODULUSOFELASTICITYUNIT
	SHEARMODULUSUNIT
	LINEARSTIFFNESSUNIT
	ROTATIONALSTIFFNESSUNIT
	MODULUSOFSUBGRADEREACTIONUNIT
	ACCELERATIONUNIT
	CURVATUREUNIT
	HEATINGVALUEUNIT
	IONCONCENTRATIONUNIT
	LUMINOUSINTENSITYDISTRIBUTIONUNIT
	MASSPERLENGTHUNIT
	MODULUSOFLINEARSUBGRADEREACTIONUNIT
	MODULUSOFROTATIONALSUBGRADEREACTIONUNIT
	PHUNIT
	ROTATIONALMASSUNIT
	SECTIONAREAINTEGRALUNIT
	SECTIONMODULUSUNIT
	SOUNDPOWERLEVELUNIT
	SOUNDPOWERUNIT
	SOUNDPRESSURELEVELUNIT
	SOUNDPRESSUREUNIT
	TEMPERATUREGRADIENTUNIT
	TEMPERATURERATEOFCHANGEUNIT
	THERMALEXPANSIONCOEFFICIENTUNIT
	WARPINGCONSTANTUNIT
	WARPINGMOMENTUNIT
	USERDEFINED
}
enum DirectionSense {
	POSITIVE
	NEGATIVE
}
enum DiscreteAccessoryType {
	ANCHORPLATE
	BRACKET
	SHOE
	USERDEFINED
	NOTDEFINED
}
enum DistributionChamberElementType {
	FORMEDDUCT
	INSPECTIONCHAMBER
	INSPECTIONPIT
	MANHOLE
	METERCHAMBER
	SUMP
	TRENCH
	VALVECHAMBER
	USERDEFINED
	NOTDEFINED
}
enum DistributionPortType {
	CABLE
	CABLECARRIER
	DUCT
	PIPE
	USERDEFINED
	NOTDEFINED
}
enum DistributionSystem {
	AIRCONDITIONING
	AUDIOVISUAL
	CHEMICAL
	CHILLEDWATER
	COMMUNICATION
	COMPRESSEDAIR
	CONDENSERWATER
	CONTROL
	CONVEYING
	DATA
	DISPOSAL
	DOMESTICCOLDWATER
	DOMESTICHOTWATER
	DRAINAGE
	EARTHING
	ELECTRICAL
	ELECTROACOUSTIC
	EXHAUST
	FIREPROTECTION
	FUEL
	GAS
	HAZARDOUS
	HEATING
	LIGHTING
	LIGHTNINGPROTECTION
	MUNICIPALSOLIDWASTE
	OIL
	OPERATIONAL
	POWERGENERATION
	RAINWATER
	REFRIGERATION
	SECURITY
	SEWAGE
	SIGNAL
	STORMWATER
	TELEPHONE
	TV
	VACUUM
	VENT
	VENTILATION
	WASTEWATER
	WATERSUPPLY
	USERDEFINED
	NOTDEFINED
}
enum DocumentConfidentiality {
	PUBLIC
	RESTRICTED
	CONFIDENTIAL
	PERSONAL
	USERDEFINED
	NOTDEFINED
}
enum DocumentStatus {
	DRAFT
	FINALDRAFT
	FINAL
	REVISION
	NOTDEFINED
}
enum DoorPanelOperation {
	SWINGING
	DOUBLE_ACTING
	SLIDING
	FOLDING
	REVOLVING
	ROLLINGUP
	FIXEDPANEL
	USERDEFINED
	NOTDEFINED
}
enum DoorPanelPosition {
	LEFT
	MIDDLE
	RIGHT
	NOTDEFINED
}
enum DoorStyleConstruction {
	ALUMINIUM
	HIGH_GRADE_STEEL
	STEEL
	WOOD
	ALUMINIUM_WOOD
	ALUMINIUM_PLASTIC
	PLASTIC
	USERDEFINED
	NOTDEFINED
}
enum DoorStyleOperation {
	SINGLE_SWING_LEFT
	SINGLE_SWING_RIGHT
	DOUBLE_DOOR_SINGLE_SWING
	DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT
	DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT
	DOUBLE_SWING_LEFT
	DOUBLE_SWING_RIGHT
	DOUBLE_DOOR_DOUBLE_SWING
	SLIDING_TO_LEFT
	SLIDING_TO_RIGHT
	DOUBLE_DOOR_SLIDING
	FOLDING_TO_LEFT
	FOLDING_TO_RIGHT
	DOUBLE_DOOR_FOLDING
	REVOLVING
	ROLLINGUP
	USERDEFINED
	NOTDEFINED
}
enum DoorType {
	DOOR
	GATE
	TRAPDOOR
	USERDEFINED
	NOTDEFINED
}
enum DoorTypeOperation {
	SINGLE_SWING_LEFT
	SINGLE_SWING_RIGHT
	DOUBLE_DOOR_SINGLE_SWING
	DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT
	DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT
	DOUBLE_SWING_LEFT
	DOUBLE_SWING_RIGHT
	DOUBLE_DOOR_DOUBLE_SWING
	SLIDING_TO_LEFT
	SLIDING_TO_RIGHT
	DOUBLE_DOOR_SLIDING
	FOLDING_TO_LEFT
	FOLDING_TO_RIGHT
	DOUBLE_DOOR_FOLDING
	REVOLVING
	ROLLINGUP
	SWING_FIXED_LEFT
	SWING_FIXED_RIGHT
	USERDEFINED
	NOTDEFINED
}
enum DuctFittingType {
	BEND
	CONNECTOR
	ENTRY
	EXIT
	JUNCTION
	OBSTRUCTION
	TRANSITION
	USERDEFINED
	NOTDEFINED
}
enum DuctSegmentType {
	RIGIDSEGMENT
	FLEXIBLESEGMENT
	USERDEFINED
	NOTDEFINED
}
enum DuctSilencerType {
	FLATOVAL
	RECTANGULAR
	ROUND
	USERDEFINED
	NOTDEFINED
}
enum ElectricApplianceType {
	DISHWASHER
	ELECTRICCOOKER
	FREESTANDINGELECTRICHEATER
	FREESTANDINGFAN
	FREESTANDINGWATERHEATER
	FREESTANDINGWATERCOOLER
	FREEZER
	FRIDGE_FREEZER
	HANDDRYER
	KITCHENMACHINE
	MICROWAVE
	PHOTOCOPIER
	REFRIGERATOR
	TUMBLEDRYER
	VENDINGMACHINE
	WASHINGMACHINE
	USERDEFINED
	NOTDEFINED
}
enum ElectricDistributionBoardType {
	CONSUMERUNIT
	DISTRIBUTIONBOARD
	MOTORCONTROLCENTRE
	SWITCHBOARD
	USERDEFINED
	NOTDEFINED
}
enum ElectricFlowStorageDeviceType {
	BATTERY
	CAPACITORBANK
	HARMONICFILTER
	INDUCTORBANK
	UPS
	USERDEFINED
	NOTDEFINED
}
enum ElectricGeneratorType {
	CHP
	ENGINEGENERATOR
	STANDALONE
	USERDEFINED
	NOTDEFINED
}
enum ElectricMotorType {
	DC
	INDUCTION
	POLYPHASE
	RELUCTANCESYNCHRONOUS
	SYNCHRONOUS
	USERDEFINED
	NOTDEFINED
}
enum ElectricTimeControlType {
	TIMECLOCK
	TIMEDELAY
	RELAY
	USERDEFINED
	NOTDEFINED
}
enum ElementAssemblyType {
	ACCESSORY_ASSEMBLY
	ARCH
	BEAM_GRID
	BRACED_FRAME
	GIRDER
	REINFORCEMENT_UNIT
	RIGID_FRAME
	SLAB_FIELD
	TRUSS
	USERDEFINED
	NOTDEFINED
}
enum ElementComposition {
	COMPLEX
	ELEMENT
	PARTIAL
}
enum EngineType {
	EXTERNALCOMBUSTION
	INTERNALCOMBUSTION
	USERDEFINED
	NOTDEFINED
}
enum EvaporativeCoolerType {
	DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER
	DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER
	DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER
	DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER
	DIRECTEVAPORATIVEAIRWASHER
	INDIRECTEVAPORATIVEPACKAGEAIRCOOLER
	INDIRECTEVAPORATIVEWETCOIL
	INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER
	INDIRECTDIRECTCOMBINATION
	USERDEFINED
	NOTDEFINED
}
enum EvaporatorType {
	DIRECTEXPANSION
	DIRECTEXPANSIONSHELLANDTUBE
	DIRECTEXPANSIONTUBEINTUBE
	DIRECTEXPANSIONBRAZEDPLATE
	FLOODEDSHELLANDTUBE
	SHELLANDCOIL
	USERDEFINED
	NOTDEFINED
}
enum EventTriggerType {
	EVENTRULE
	EVENTMESSAGE
	EVENTTIME
	EVENTCOMPLEX
	USERDEFINED
	NOTDEFINED
}
enum EventType {
	STARTEVENT
	ENDEVENT
	INTERMEDIATEEVENT
	USERDEFINED
	NOTDEFINED
}
enum ExternalSpatialElementType {
	EXTERNAL
	EXTERNAL_EARTH
	EXTERNAL_WATER
	EXTERNAL_FIRE
	USERDEFINED
	NOTDEFINED
}
enum FanType {
	CENTRIFUGALFORWARDCURVED
	CENTRIFUGALRADIAL
	CENTRIFUGALBACKWARDINCLINEDCURVED
	CENTRIFUGALAIRFOIL
	TUBEAXIAL
	VANEAXIAL
	PROPELLORAXIAL
	USERDEFINED
	NOTDEFINED
}
enum FastenerType {
	GLUE
	MORTAR
	WELD
	USERDEFINED
	NOTDEFINED
}
enum FilterType {
	AIRPARTICLEFILTER
	COMPRESSEDAIRFILTER
	ODORFILTER
	OILFILTER
	STRAINER
	WATERFILTER
	USERDEFINED
	NOTDEFINED
}
enum FireSuppressionTerminalType {
	BREECHINGINLET
	FIREHYDRANT
	HOSEREEL
	SPRINKLER
	SPRINKLERDEFLECTOR
	USERDEFINED
	NOTDEFINED
}
enum FlowDirection {
	SOURCE
	SINK
	SOURCEANDSINK
	NOTDEFINED
}
enum FlowInstrumentType {
	PRESSUREGAUGE
	THERMOMETER
	AMMETER
	FREQUENCYMETER
	POWERFACTORMETER
	PHASEANGLEMETER
	VOLTMETER_PEAK
	VOLTMETER_RMS
	USERDEFINED
	NOTDEFINED
}
enum FlowMeterType {
	ENERGYMETER
	GASMETER
	OILMETER
	WATERMETER
	USERDEFINED
	NOTDEFINED
}
enum FootingType {
	CAISSON_FOUNDATION
	FOOTING_BEAM
	PAD_FOOTING
	PILE_CAP
	STRIP_FOOTING
	USERDEFINED
	NOTDEFINED
}
enum FurnitureType {
	CHAIR
	TABLE
	DESK
	BED
	FILECABINET
	SHELF
	SOFA
	USERDEFINED
	NOTDEFINED
}
enum GeographicElementType {
	TERRAIN
	USERDEFINED
	NOTDEFINED
}
enum GeometricProjection {
	GRAPH_VIEW
	SKETCH_VIEW
	MODEL_VIEW
	PLAN_VIEW
	REFLECTED_PLAN_VIEW
	SECTION_VIEW
	ELEVATION_VIEW
	USERDEFINED
	NOTDEFINED
}
enum GlobalOrLocal {
	GLOBAL_COORDS
	LOCAL_COORDS
}
enum GridType {
	RECTANGULAR
	RADIAL
	TRIANGULAR
	IRREGULAR
	USERDEFINED
	NOTDEFINED
}
enum HeatExchangerType {
	PLATE
	SHELLANDTUBE
	USERDEFINED
	NOTDEFINED
}
enum HumidifierType {
	STEAMINJECTION
	ADIABATICAIRWASHER
	ADIABATICPAN
	ADIABATICWETTEDELEMENT
	ADIABATICATOMIZING
	ADIABATICULTRASONIC
	ADIABATICRIGIDMEDIA
	ADIABATICCOMPRESSEDAIRNOZZLE
	ASSISTEDELECTRIC
	ASSISTEDNATURALGAS
	ASSISTEDPROPANE
	ASSISTEDBUTANE
	ASSISTEDSTEAM
	USERDEFINED
	NOTDEFINED
}
enum InterceptorType {
	CYCLONIC
	GREASE
	OIL
	PETROL
	USERDEFINED
	NOTDEFINED
}
enum InternalOrExternal {
	INTERNAL
	EXTERNAL
	EXTERNAL_EARTH
	EXTERNAL_WATER
	EXTERNAL_FIRE
	NOTDEFINED
}
enum InventoryType {
	ASSETINVENTORY
	SPACEINVENTORY
	FURNITUREINVENTORY
	USERDEFINED
	NOTDEFINED
}
enum JunctionBoxType {
	DATA
	POWER
	USERDEFINED
	NOTDEFINED
}
enum KnotType {
	UNIFORM_KNOTS
	QUASI_UNIFORM_KNOTS
	PIECEWISE_BEZIER_KNOTS
	UNSPECIFIED
}
enum LaborResourceType {
	ADMINISTRATION
	CARPENTRY
	CLEANING
	CONCRETE
	DRYWALL
	ELECTRIC
	FINISHING
	FLOORING
	GENERAL
	HVAC
	LANDSCAPING
	MASONRY
	PAINTING
	PAVING
	PLUMBING
	ROOFING
	SITEGRADING
	STEELWORK
	SURVEYING
	USERDEFINED
	NOTDEFINED
}
enum LampType {
	COMPACTFLUORESCENT
	FLUORESCENT
	HALOGEN
	HIGHPRESSUREMERCURY
	HIGHPRESSURESODIUM
	LED
	METALHALIDE
	OLED
	TUNGSTENFILAMENT
	USERDEFINED
	NOTDEFINED
}
enum LayerSetDirection {
	AXIS1
	AXIS2
	AXIS3
}
enum LightDistributionCurve {
	TYPE_A
	TYPE_B
	TYPE_C
	NOTDEFINED
}
enum LightEmissionSource {
	COMPACTFLUORESCENT
	FLUORESCENT
	HIGHPRESSUREMERCURY
	HIGHPRESSURESODIUM
	LIGHTEMITTINGDIODE
	LOWPRESSURESODIUM
	LOWVOLTAGEHALOGEN
	MAINVOLTAGEHALOGEN
	METALHALIDE
	TUNGSTENFILAMENT
	NOTDEFINED
}
enum LightFixtureType {
	POINTSOURCE
	DIRECTIONSOURCE
	SECURITYLIGHTING
	USERDEFINED
	NOTDEFINED
}
enum LoadGroupType {
	LOAD_GROUP
	LOAD_CASE
	LOAD_COMBINATION
	USERDEFINED
	NOTDEFINED
}
enum LogicalOperator {
	LOGICALAND
	LOGICALOR
	LOGICALXOR
	LOGICALNOTAND
	LOGICALNOTOR
}
enum MechanicalFastenerType {
	ANCHORBOLT
	BOLT
	DOWEL
	NAIL
	NAILPLATE
	RIVET
	SCREW
	SHEARCONNECTOR
	STAPLE
	STUDSHEARCONNECTOR
	USERDEFINED
	NOTDEFINED
}
enum MedicalDeviceType {
	AIRSTATION
	FEEDAIRUNIT
	OXYGENGENERATOR
	OXYGENPLANT
	VACUUMSTATION
	USERDEFINED
	NOTDEFINED
}
enum MemberType {
	BRACE
	CHORD
	COLLAR
	MEMBER
	MULLION
	PLATE
	POST
	PURLIN
	RAFTER
	STRINGER
	STRUT
	STUD
	USERDEFINED
	NOTDEFINED
}
enum MotorConnectionType {
	BELTDRIVE
	COUPLING
	DIRECTDRIVE
	USERDEFINED
	NOTDEFINED
}
enum NullStyle {
	NULL
}
enum ObjectType {
	PRODUCT
	PROCESS
	CONTROL
	RESOURCE
	ACTOR
	GROUP
	PROJECT
	NOTDEFINED
}
enum Objective {
	CODECOMPLIANCE
	CODEWAIVER
	DESIGNINTENT
	EXTERNAL
	HEALTHANDSAFETY
	MERGECONFLICT
	MODELVIEW
	PARAMETER
	REQUIREMENT
	SPECIFICATION
	TRIGGERCONDITION
	USERDEFINED
	NOTDEFINED
}
enum OccupantType {
	ASSIGNEE
	ASSIGNOR
	LESSEE
	LESSOR
	LETTINGAGENT
	OWNER
	TENANT
	USERDEFINED
	NOTDEFINED
}
enum OpeningElementType {
	OPENING
	RECESS
	USERDEFINED
	NOTDEFINED
}
enum OutletType {
	AUDIOVISUALOUTLET
	COMMUNICATIONSOUTLET
	POWEROUTLET
	DATAOUTLET
	TELEPHONEOUTLET
	USERDEFINED
	NOTDEFINED
}
enum PerformanceHistoryType {
	USERDEFINED
	NOTDEFINED
}
enum PermeableCoveringOperation {
	GRILL
	LOUVER
	SCREEN
	USERDEFINED
	NOTDEFINED
}
enum PermitType {
	ACCESS
	BUILDING
	WORK
	USERDEFINED
	NOTDEFINED
}
enum PhysicalOrVirtual {
	PHYSICAL
	VIRTUAL
	NOTDEFINED
}
enum PileConstruction {
	CAST_IN_PLACE
	COMPOSITE
	PRECAST_CONCRETE
	PREFAB_STEEL
	USERDEFINED
	NOTDEFINED
}
enum PileType {
	BORED
	DRIVEN
	JETGROUTING
	COHESION
	FRICTION
	SUPPORT
	USERDEFINED
	NOTDEFINED
}
enum PipeFittingType {
	BEND
	CONNECTOR
	ENTRY
	EXIT
	JUNCTION
	OBSTRUCTION
	TRANSITION
	USERDEFINED
	NOTDEFINED
}
enum PipeSegmentType {
	CULVERT
	FLEXIBLESEGMENT
	RIGIDSEGMENT
	GUTTER
	SPOOL
	USERDEFINED
	NOTDEFINED
}
enum PlateType {
	CURTAIN_PANEL
	SHEET
	USERDEFINED
	NOTDEFINED
}
enum PreferredSurfaceCurveRepresentation {
	CURVE3D
	PCURVE_S1
	PCURVE_S2
}
enum ProcedureType {
	ADVICE_CAUTION
	ADVICE_NOTE
	ADVICE_WARNING
	CALIBRATION
	DIAGNOSTIC
	SHUTDOWN
	STARTUP
	USERDEFINED
	NOTDEFINED
}
enum ProfileType {
	CURVE
	AREA
}
enum ProjectOrderType {
	CHANGEORDER
	MAINTENANCEWORKORDER
	MOVEORDER
	PURCHASEORDER
	WORKORDER
	USERDEFINED
	NOTDEFINED
}
enum ProjectedOrTrueLength {
	PROJECTED_LENGTH
	TRUE_LENGTH
}
enum ProjectionElementType {
	USERDEFINED
	NOTDEFINED
}
enum PropertySetTemplateType {
	PSET_TYPEDRIVENONLY
	PSET_TYPEDRIVENOVERRIDE
	PSET_OCCURRENCEDRIVEN
	PSET_PERFORMANCEDRIVEN
	QTO_TYPEDRIVENONLY
	QTO_TYPEDRIVENOVERRIDE
	QTO_OCCURRENCEDRIVEN
	NOTDEFINED
}
enum ProtectiveDeviceTrippingUnitType {
	ELECTRONIC
	ELECTROMAGNETIC
	RESIDUALCURRENT
	THERMAL
	USERDEFINED
	NOTDEFINED
}
enum ProtectiveDeviceType {
	CIRCUITBREAKER
	EARTHLEAKAGECIRCUITBREAKER
	EARTHINGSWITCH
	FUSEDISCONNECTOR
	RESIDUALCURRENTCIRCUITBREAKER
	RESIDUALCURRENTSWITCH
	VARISTOR
	USERDEFINED
	NOTDEFINED
}
enum PumpType {
	CIRCULATOR
	ENDSUCTION
	SPLITCASE
	SUBMERSIBLEPUMP
	SUMPPUMP
	VERTICALINLINE
	VERTICALTURBINE
	USERDEFINED
	NOTDEFINED
}
enum RailingType {
	HANDRAIL
	GUARDRAIL
	BALUSTRADE
	USERDEFINED
	NOTDEFINED
}
enum RampFlightType {
	STRAIGHT
	SPIRAL
	USERDEFINED
	NOTDEFINED
}
enum RampType {
	STRAIGHT_RUN_RAMP
	TWO_STRAIGHT_RUN_RAMP
	QUARTER_TURN_RAMP
	TWO_QUARTER_TURN_RAMP
	HALF_TURN_RAMP
	SPIRAL_RAMP
	USERDEFINED
	NOTDEFINED
}
enum RecurrenceType {
	DAILY
	WEEKLY
	MONTHLY_BY_DAY_OF_MONTH
	MONTHLY_BY_POSITION
	BY_DAY_COUNT
	BY_WEEKDAY_COUNT
	YEARLY_BY_DAY_OF_MONTH
	YEARLY_BY_POSITION
}
enum ReflectanceMethod {
	BLINN
	FLAT
	GLASS
	MATT
	METAL
	MIRROR
	PHONG
	PLASTIC
	STRAUSS
	NOTDEFINED
}
enum ReinforcingBarRole {
	MAIN
	SHEAR
	LIGATURE
	STUD
	PUNCHING
	EDGE
	RING
	ANCHORING
	USERDEFINED
	NOTDEFINED
}
enum ReinforcingBarSurface {
	PLAIN
	TEXTURED
}
enum ReinforcingBarType {
	ANCHORING
	EDGE
	LIGATURE
	MAIN
	PUNCHING
	RING
	SHEAR
	STUD
	USERDEFINED
	NOTDEFINED
}
enum ReinforcingMeshType {
	USERDEFINED
	NOTDEFINED
}
enum Role {
	SUPPLIER
	MANUFACTURER
	CONTRACTOR
	SUBCONTRACTOR
	ARCHITECT
	STRUCTURALENGINEER
	COSTENGINEER
	CLIENT
	BUILDINGOWNER
	BUILDINGOPERATOR
	MECHANICALENGINEER
	ELECTRICALENGINEER
	PROJECTMANAGER
	FACILITIESMANAGER
	CIVILENGINEER
	COMMISSIONINGENGINEER
	ENGINEER
	OWNER
	CONSULTANT
	CONSTRUCTIONMANAGER
	FIELDCONSTRUCTIONMANAGER
	RESELLER
	USERDEFINED
}
enum RoofType {
	FLAT_ROOF
	SHED_ROOF
	GABLE_ROOF
	HIP_ROOF
	HIPPED_GABLE_ROOF
	GAMBREL_ROOF
	MANSARD_ROOF
	BARREL_ROOF
	RAINBOW_ROOF
	BUTTERFLY_ROOF
	PAVILION_ROOF
	DOME_ROOF
	FREEFORM
	USERDEFINED
	NOTDEFINED
}
enum SIPrefix {
	EXA
	PETA
	TERA
	GIGA
	MEGA
	KILO
	HECTO
	DECA
	DECI
	CENTI
	MILLI
	MICRO
	NANO
	PICO
	FEMTO
	ATTO
}
enum SIUnitName {
	AMPERE
	BECQUEREL
	CANDELA
	COULOMB
	CUBIC_METRE
	DEGREE_CELSIUS
	FARAD
	GRAM
	GRAY
	HENRY
	HERTZ
	JOULE
	KELVIN
	LUMEN
	LUX
	METRE
	MOLE
	NEWTON
	OHM
	PASCAL
	RADIAN
	SECOND
	SIEMENS
	SIEVERT
	SQUARE_METRE
	STERADIAN
	TESLA
	VOLT
	WATT
	WEBER
}
enum SanitaryTerminalType {
	BATH
	BIDET
	CISTERN
	SHOWER
	SINK
	SANITARYFOUNTAIN
	TOILETPAN
	URINAL
	WASHHANDBASIN
	WCSEAT
	USERDEFINED
	NOTDEFINED
}
enum SectionType {
	UNIFORM
	TAPERED
}
enum SensorType {
	COSENSOR
	CO2SENSOR
	CONDUCTANCESENSOR
	CONTACTSENSOR
	FIRESENSOR
	FLOWSENSOR
	FROSTSENSOR
	GASSENSOR
	HEATSENSOR
	HUMIDITYSENSOR
	IDENTIFIERSENSOR
	IONCONCENTRATIONSENSOR
	LEVELSENSOR
	LIGHTSENSOR
	MOISTURESENSOR
	MOVEMENTSENSOR
	PHSENSOR
	PRESSURESENSOR
	RADIATIONSENSOR
	RADIOACTIVITYSENSOR
	SMOKESENSOR
	SOUNDSENSOR
	TEMPERATURESENSOR
	WINDSENSOR
	USERDEFINED
	NOTDEFINED
}
enum Sequence {
	START_START
	START_FINISH
	FINISH_START
	FINISH_FINISH
	USERDEFINED
	NOTDEFINED
}
enum ShadingDeviceType {
	JALOUSIE
	SHUTTER
	AWNING
	USERDEFINED
	NOTDEFINED
}
enum SimplePropertyTemplateType {
	P_SINGLEVALUE
	P_ENUMERATEDVALUE
	P_BOUNDEDVALUE
	P_LISTVALUE
	P_TABLEVALUE
	P_REFERENCEVALUE
	Q_LENGTH
	Q_AREA
	Q_VOLUME
	Q_COUNT
	Q_WEIGHT
	Q_TIME
}
enum SlabType {
	FLOOR
	ROOF
	LANDING
	BASESLAB
	USERDEFINED
	NOTDEFINED
}
enum SolarDeviceType {
	SOLARCOLLECTOR
	SOLARPANEL
	USERDEFINED
	NOTDEFINED
}
enum SpaceHeaterType {
	CONVECTOR
	RADIATOR
	USERDEFINED
	NOTDEFINED
}
enum SpaceType {
	SPACE
	PARKING
	GFA
	INTERNAL
	EXTERNAL
	USERDEFINED
	NOTDEFINED
}
enum SpatialZoneType {
	CONSTRUCTION
	FIRESAFETY
	LIGHTING
	OCCUPANCY
	SECURITY
	THERMAL
	TRANSPORT
	VENTILATION
	USERDEFINED
	NOTDEFINED
}
enum StackTerminalType {
	BIRDCAGE
	COWL
	RAINWATERHOPPER
	USERDEFINED
	NOTDEFINED
}
enum StairFlightType {
	STRAIGHT
	WINDER
	SPIRAL
	CURVED
	FREEFORM
	USERDEFINED
	NOTDEFINED
}
enum StairType {
	STRAIGHT_RUN_STAIR
	TWO_STRAIGHT_RUN_STAIR
	QUARTER_WINDING_STAIR
	QUARTER_TURN_STAIR
	HALF_WINDING_STAIR
	HALF_TURN_STAIR
	TWO_QUARTER_WINDING_STAIR
	TWO_QUARTER_TURN_STAIR
	THREE_QUARTER_WINDING_STAIR
	THREE_QUARTER_TURN_STAIR
	SPIRAL_STAIR
	DOUBLE_RETURN_STAIR
	CURVED_RUN_STAIR
	TWO_CURVED_RUN_STAIR
	USERDEFINED
	NOTDEFINED
}
enum State {
	READWRITE
	READONLY
	LOCKED
	READWRITELOCKED
	READONLYLOCKED
}
enum StructuralCurveActivityType {
	CONST
	LINEAR
	POLYGONAL
	EQUIDISTANT
	SINUS
	PARABOLA
	DISCRETE
	USERDEFINED
	NOTDEFINED
}
enum StructuralCurveMemberType {
	RIGID_JOINED_MEMBER
	PIN_JOINED_MEMBER
	CABLE
	TENSION_MEMBER
	COMPRESSION_MEMBER
	USERDEFINED
	NOTDEFINED
}
enum StructuralSurfaceActivityType {
	CONST
	BILINEAR
	DISCRETE
	ISOCONTOUR
	USERDEFINED
	NOTDEFINED
}
enum StructuralSurfaceMemberType {
	BENDING_ELEMENT
	MEMBRANE_ELEMENT
	SHELL
	USERDEFINED
	NOTDEFINED
}
enum SubContractResourceType {
	PURCHASE
	WORK
	USERDEFINED
	NOTDEFINED
}
enum SurfaceFeatureType {
	MARK
	TAG
	TREATMENT
	USERDEFINED
	NOTDEFINED
}
enum SurfaceSide {
	POSITIVE
	NEGATIVE
	BOTH
}
enum SwitchingDeviceType {
	CONTACTOR
	DIMMERSWITCH
	EMERGENCYSTOP
	KEYPAD
	MOMENTARYSWITCH
	SELECTORSWITCH
	STARTER
	SWITCHDISCONNECTOR
	TOGGLESWITCH
	USERDEFINED
	NOTDEFINED
}
enum SystemFurnitureElementType {
	PANEL
	WORKSURFACE
	USERDEFINED
	NOTDEFINED
}
enum TankType {
	BASIN
	BREAKPRESSURE
	EXPANSION
	FEEDANDEXPANSION
	PRESSUREVESSEL
	STORAGE
	VESSEL
	USERDEFINED
	NOTDEFINED
}
enum TaskDuration {
	ELAPSEDTIME
	WORKTIME
	NOTDEFINED
}
enum TaskType {
	ATTENDANCE
	CONSTRUCTION
	DEMOLITION
	DISMANTLE
	DISPOSAL
	INSTALLATION
	LOGISTIC
	MAINTENANCE
	MOVE
	OPERATION
	REMOVAL
	RENOVATION
	USERDEFINED
	NOTDEFINED
}
enum TendonAnchorType {
	COUPLER
	FIXED_END
	TENSIONING_END
	USERDEFINED
	NOTDEFINED
}
enum TendonType {
	BAR
	COATED
	STRAND
	WIRE
	USERDEFINED
	NOTDEFINED
}
enum TextPath {
	LEFT
	RIGHT
	UP
	DOWN
}
enum TimeSeriesDataType {
	CONTINUOUS
	DISCRETE
	DISCRETEBINARY
	PIECEWISEBINARY
	PIECEWISECONSTANT
	PIECEWISECONTINUOUS
	NOTDEFINED
}
enum TransformerType {
	CURRENT
	FREQUENCY
	INVERTER
	RECTIFIER
	VOLTAGE
	USERDEFINED
	NOTDEFINED
}
enum TransitionCode {
	DISCONTINUOUS
	CONTINUOUS
	CONTSAMEGRADIENT
	CONTSAMEGRADIENTSAMECURVATURE
}
enum TransportElementType {
	ELEVATOR
	ESCALATOR
	MOVINGWALKWAY
	CRANEWAY
	LIFTINGGEAR
	USERDEFINED
	NOTDEFINED
}
enum TrimmingPreference {
	CARTESIAN
	PARAMETER
	UNSPECIFIED
}
enum TubeBundleType {
	FINNED
	USERDEFINED
	NOTDEFINED
}
enum Unit {
	ABSORBEDDOSEUNIT
	AMOUNTOFSUBSTANCEUNIT
	AREAUNIT
	DOSEEQUIVALENTUNIT
	ELECTRICCAPACITANCEUNIT
	ELECTRICCHARGEUNIT
	ELECTRICCONDUCTANCEUNIT
	ELECTRICCURRENTUNIT
	ELECTRICRESISTANCEUNIT
	ELECTRICVOLTAGEUNIT
	ENERGYUNIT
	FORCEUNIT
	FREQUENCYUNIT
	ILLUMINANCEUNIT
	INDUCTANCEUNIT
	LENGTHUNIT
	LUMINOUSFLUXUNIT
	LUMINOUSINTENSITYUNIT
	MAGNETICFLUXDENSITYUNIT
	MAGNETICFLUXUNIT
	MASSUNIT
	PLANEANGLEUNIT
	POWERUNIT
	PRESSUREUNIT
	RADIOACTIVITYUNIT
	SOLIDANGLEUNIT
	THERMODYNAMICTEMPERATUREUNIT
	TIMEUNIT
	VOLUMEUNIT
	USERDEFINED
}
enum UnitaryControlElementType {
	ALARMPANEL
	CONTROLPANEL
	GASDETECTIONPANEL
	INDICATORPANEL
	MIMICPANEL
	HUMIDISTAT
	THERMOSTAT
	WEATHERSTATION
	USERDEFINED
	NOTDEFINED
}
enum UnitaryEquipmentType {
	AIRHANDLER
	AIRCONDITIONINGUNIT
	DEHUMIDIFIER
	SPLITSYSTEM
	ROOFTOPUNIT
	USERDEFINED
	NOTDEFINED
}
enum ValveType {
	AIRRELEASE
	ANTIVACUUM
	CHANGEOVER
	CHECK
	COMMISSIONING
	DIVERTING
	DRAWOFFCOCK
	DOUBLECHECK
	DOUBLEREGULATING
	FAUCET
	FLUSHING
	GASCOCK
	GASTAP
	ISOLATING
	MIXING
	PRESSUREREDUCING
	PRESSURERELIEF
	REGULATING
	SAFETYCUTOFF
	STEAMTRAP
	STOPCOCK
	USERDEFINED
	NOTDEFINED
}
enum VibrationIsolatorType {
	COMPRESSION
	SPRING
	USERDEFINED
	NOTDEFINED
}
enum VoidingFeatureType {
	CUTOUT
	NOTCH
	HOLE
	MITER
	CHAMFER
	EDGE
	USERDEFINED
	NOTDEFINED
}
enum WallType {
	MOVABLE
	PARAPET
	PARTITIONING
	PLUMBINGWALL
	SHEAR
	SOLIDWALL
	STANDARD
	POLYGONAL
	ELEMENTEDWALL
	USERDEFINED
	NOTDEFINED
}
enum WasteTerminalType {
	FLOORTRAP
	FLOORWASTE
	GULLYSUMP
	GULLYTRAP
	ROOFDRAIN
	WASTEDISPOSALUNIT
	WASTETRAP
	USERDEFINED
	NOTDEFINED
}
enum WindowPanelOperation {
	SIDEHUNGRIGHTHAND
	SIDEHUNGLEFTHAND
	TILTANDTURNRIGHTHAND
	TILTANDTURNLEFTHAND
	TOPHUNG
	BOTTOMHUNG
	PIVOTHORIZONTAL
	PIVOTVERTICAL
	SLIDINGHORIZONTAL
	SLIDINGVERTICAL
	REMOVABLECASEMENT
	FIXEDCASEMENT
	OTHEROPERATION
	NOTDEFINED
}
enum WindowPanelPosition {
	LEFT
	MIDDLE
	RIGHT
	BOTTOM
	TOP
	NOTDEFINED
}
enum WindowStyleConstruction {
	ALUMINIUM
	HIGH_GRADE_STEEL
	STEEL
	WOOD
	ALUMINIUM_WOOD
	PLASTIC
	OTHER_CONSTRUCTION
	NOTDEFINED
}
enum WindowStyleOperation {
	SINGLE_PANEL
	DOUBLE_PANEL_VERTICAL
	DOUBLE_PANEL_HORIZONTAL
	TRIPLE_PANEL_VERTICAL
	TRIPLE_PANEL_BOTTOM
	TRIPLE_PANEL_TOP
	TRIPLE_PANEL_LEFT
	TRIPLE_PANEL_RIGHT
	TRIPLE_PANEL_HORIZONTAL
	USERDEFINED
	NOTDEFINED
}
enum WindowType {
	WINDOW
	SKYLIGHT
	LIGHTDOME
	USERDEFINED
	NOTDEFINED
}
enum WindowTypePartitioning {
	SINGLE_PANEL
	DOUBLE_PANEL_VERTICAL
	DOUBLE_PANEL_HORIZONTAL
	TRIPLE_PANEL_VERTICAL
	TRIPLE_PANEL_BOTTOM
	TRIPLE_PANEL_TOP
	TRIPLE_PANEL_LEFT
	TRIPLE_PANEL_RIGHT
	TRIPLE_PANEL_HORIZONTAL
	USERDEFINED
	NOTDEFINED
}
enum WorkCalendarType {
	FIRSTSHIFT
	SECONDSHIFT
	THIRDSHIFT
	USERDEFINED
	NOTDEFINED
}
enum WorkPlanType {
	ACTUAL
	BASELINE
	PLANNED
	USERDEFINED
	NOTDEFINED
}
enum WorkScheduleType {
	ACTUAL
	BASELINE
	PLANNED
	USERDEFINED
	NOTDEFINED
}
type ActionRequest{
	PredefinedType: ActionRequestType!
	Status: Label!
	LongDescription: Text!
}
type Control{
	Identification: Identifier!
	Controls: [RelAssignsToControl]!
}
type Actor{
	TheActor: ActorSelect!
	IsActingUpon: [RelAssignsToActor]!
}
type Occupant{
	PredefinedType: OccupantType!
}
type Object{
	ObjectType: Label!
	IsDeclaredBy: [RelDefinesByObject]!
	Declares: [RelDefinesByObject]!
	IsTypedBy: [RelDefinesByType]!
	IsDefinedBy: [RelDefinesByProperties]!
}
type ActorRole{
	Role: Role!
	UserDefinedRole: Label!
	Description: Text!
	HasExternalReference: [ExternalReferenceRelationship]!
}
type Actuator{
	PredefinedType: ActuatorType!
}
type DistributionControlElement{
	AssignedToFlowElement: [RelFlowControlElements]!
}
type ActuatorType{
	PredefinedType: ActuatorType!
}
type DistributionControlElementType{

}
type Address{
	Purpose: AddressType!
	Description: Text!
	UserDefinedPurpose: Label!
	OfPerson: [Person]!
	OfOrganization: [Organization]!
}
type PostalAddress{
	InternalLocation: Label!
	AddressLines: [Label]!
	PostalBox: Label!
	Town: Label!
	Region: Label!
	PostalCode: Label!
	Country: Label!
}
type TelecomAddress{
	TelephoneNumbers: [Label]!
	FacsimileNumbers: [Label]!
	PagerNumber: Label!
	ElectronicMailAddresses: [Label]!
	WWWHomePageURL: URIReference!
	MessagingIDs: [URIReference]!
}
type AdvancedBrep{

}
type AdvancedBrepWithVoids{
	Voids: [ClosedShell]!
}
type ManifoldSolidBrep{
	Outer: ClosedShell!
}
type AdvancedFace{

}
type FaceSurface{
	FaceSurface: Surface!
	SameSense: Boolean!
}
type AirTerminal{
	PredefinedType: AirTerminalType!
}
type FlowTerminal{

}
type AirTerminalBox{
	PredefinedType: AirTerminalBoxType!
}
type FlowController{

}
type AirTerminalBoxType{
	PredefinedType: AirTerminalBoxType!
}
type FlowControllerType{

}
type AirTerminalType{
	PredefinedType: AirTerminalType!
}
type FlowTerminalType{

}
type AirToAirHeatRecovery{
	PredefinedType: AirToAirHeatRecoveryType!
}
type EnergyConversionDevice{

}
type AirToAirHeatRecoveryType{
	PredefinedType: AirToAirHeatRecoveryType!
}
type EnergyConversionDeviceType{

}
type Alarm{
	PredefinedType: AlarmType!
}
type AlarmType{
	PredefinedType: AlarmType!
}
type Annotation{
	ContainedInStructure: [RelContainedInSpatialStructure]!
}
type Product{
	ObjectPlacement: ObjectPlacement!
	Representation: ProductRepresentation!
	ReferencedBy: [RelAssignsToProduct]!
}
type AnnotationFillArea{
	OuterBoundary: Curve!
	InnerBoundaries: [Curve]!
}
type GeometricRepresentationItem{

}
type Application{
	ApplicationDeveloper: Organization!
	Version: Label!
	ApplicationFullName: Label!
	ApplicationIdentifier: Identifier!
}
type AppliedValue{
	Name: Label!
	Description: Text!
	AppliedValue: AppliedValueSelect!
	UnitBasis: MeasureWithUnit!
	ApplicableDate: Date!
	FixedUntilDate: Date!
	Category: Label!
	Condition: Label!
	ArithmeticOperator: ArithmeticOperator!
	Components: [AppliedValue]!
	HasExternalReference: [ExternalReferenceRelationship]!
}
type CostValue{

}
type Approval{
	Identifier: Identifier!
	Name: Label!
	Description: Text!
	TimeOfApproval: DateTime!
	Status: Label!
	Level: Label!
	Qualifier: Text!
	RequestingApproval: ActorSelect!
	GivingApproval: ActorSelect!
	HasExternalReferences: [ExternalReferenceRelationship]!
	ApprovedObjects: [RelAssociatesApproval]!
	ApprovedResources: [ResourceApprovalRelationship]!
	IsRelatedWith: [ApprovalRelationship]!
	Relates: [ApprovalRelationship]!
}
type ApprovalRelationship{
	RelatingApproval: Approval!
	RelatedApprovals: [Approval]!
}
type ResourceLevelRelationship{
	Name: Label!
	Description: Text!
}
type ArbitraryClosedProfileDef{
	OuterCurve: Curve!
}
type ArbitraryProfileDefWithVoids{
	InnerCurves: [Curve]!
}
type ProfileDef{
	ProfileType: ProfileType!
	ProfileName: Label!
	HasExternalReference: [ExternalReferenceRelationship]!
	HasProperties: [ProfileProperties]!
}
type ArbitraryOpenProfileDef{
	Curve: BoundedCurve!
}
type CenterLineProfileDef{
	Thickness: PositiveLengthMeasure!
}
type Asset{
	Identification: Identifier!
	OriginalValue: CostValue!
	CurrentValue: CostValue!
	TotalReplacementCost: CostValue!
	Owner: ActorSelect!
	User: ActorSelect!
	ResponsiblePerson: Person!
	IncorporationDate: Date!
	DepreciatedValue: CostValue!
}
type Group{
	IsGroupedBy: [RelAssignsToGroup]!
}
type AsymmetricIShapeProfileDef{
	BottomFlangeWidth: PositiveLengthMeasure!
	OverallDepth: PositiveLengthMeasure!
	WebThickness: PositiveLengthMeasure!
	BottomFlangeThickness: PositiveLengthMeasure!
	BottomFlangeFilletRadius: NonNegativeLengthMeasure!
	TopFlangeWidth: PositiveLengthMeasure!
	TopFlangeThickness: PositiveLengthMeasure!
	TopFlangeFilletRadius: NonNegativeLengthMeasure!
	BottomFlangeEdgeRadius: NonNegativeLengthMeasure!
	BottomFlangeSlope: PlaneAngleMeasure!
	TopFlangeEdgeRadius: NonNegativeLengthMeasure!
	TopFlangeSlope: PlaneAngleMeasure!
}
type ParameterizedProfileDef{
	Position: Axis2Placement2D!
}
type AudioVisualAppliance{
	PredefinedType: AudioVisualApplianceType!
}
type AudioVisualApplianceType{
	PredefinedType: AudioVisualApplianceType!
}
type Axis1Placement{
	Axis: Direction!
	Z: Direction!
}
type Placement{
	Location: CartesianPoint!
	Dim: DimensionCount!
}
type Axis2Placement2D{
	RefDirection: Direction!
	P: [Direction]!
}
type Axis2Placement3D{
	Axis: Direction!
	RefDirection: Direction!
	P: [Direction]!
}
type BSplineCurve{
	Degree: Integer!
	ControlPointsList: [CartesianPoint]!
	CurveForm: BSplineCurveForm!
	ClosedCurve: Logical!
	SelfIntersect: Logical!
	UpperIndexOnControlPoints: Integer!
	ControlPoints: [CartesianPoint]!
}
type BSplineCurveWithKnots{
	KnotMultiplicities: [Integer]!
	Knots: [ParameterValue]!
	KnotSpec: KnotType!
	UpperIndexOnKnots: Integer!
}
type BoundedCurve{

}
type RationalBSplineCurveWithKnots{
	WeightsData: [Real]!
	Weights: [Real]!
}
type BSplineSurface{
	UDegree: Integer!
	VDegree: Integer!
	ControlPointsList: [[CartesianPoint]]!
	SurfaceForm: BSplineSurfaceForm!
	UClosed: Logical!
	VClosed: Logical!
	SelfIntersect: Logical!
	UUpper: Integer!
	VUpper: Integer!
	ControlPoints: [[CartesianPoint]]!
}
type BSplineSurfaceWithKnots{
	UMultiplicities: [Integer]!
	VMultiplicities: [Integer]!
	UKnots: [ParameterValue]!
	VKnots: [ParameterValue]!
	KnotSpec: KnotType!
	KnotVUpper: Integer!
	KnotUUpper: Integer!
}
type BoundedSurface{

}
type RationalBSplineSurfaceWithKnots{
	WeightsData: [[Real]]!
	Weights: [[Real]]!
}
type Beam{
	PredefinedType: BeamType!
}
type BeamStandardCase{

}
type BuildingElement{

}
type BeamType{
	PredefinedType: BeamType!
}
type BuildingElementType{

}
type BlobTexture{
	RasterFormat: Identifier!
	RasterCode: Binary!
}
type SurfaceTexture{
	RepeatS: Boolean!
	RepeatT: Boolean!
	Mode: Identifier!
	TextureTransform: CartesianTransformationOperator2D!
	Parameter: [Identifier]!
	IsMappedBy: [TextureCoordinate]!
	UsedInStyles: [SurfaceStyleWithTextures]!
}
type Block{
	XLength: PositiveLengthMeasure!
	YLength: PositiveLengthMeasure!
	ZLength: PositiveLengthMeasure!
}
type CsgPrimitive3D{
	Position: Axis2Placement3D!
	Dim: DimensionCount!
}
type Boiler{
	PredefinedType: BoilerType!
}
type BoilerType{
	PredefinedType: BoilerType!
}
type BooleanClippingResult{

}
type BooleanResult{
	Operator: BooleanOperator!
	FirstOperand: BooleanOperand!
	SecondOperand: BooleanOperand!
	Dim: DimensionCount!
}
type BoundaryCondition{
	Name: Label!
}
type BoundaryEdgeCondition{
	TranslationalStiffnessByLengthX: ModulusOfTranslationalSubgradeReactionSelect!
	TranslationalStiffnessByLengthY: ModulusOfTranslationalSubgradeReactionSelect!
	TranslationalStiffnessByLengthZ: ModulusOfTranslationalSubgradeReactionSelect!
	RotationalStiffnessByLengthX: ModulusOfRotationalSubgradeReactionSelect!
	RotationalStiffnessByLengthY: ModulusOfRotationalSubgradeReactionSelect!
	RotationalStiffnessByLengthZ: ModulusOfRotationalSubgradeReactionSelect!
}
type BoundaryFaceCondition{
	TranslationalStiffnessByAreaX: ModulusOfSubgradeReactionSelect!
	TranslationalStiffnessByAreaY: ModulusOfSubgradeReactionSelect!
	TranslationalStiffnessByAreaZ: ModulusOfSubgradeReactionSelect!
}
type BoundaryNodeCondition{
	TranslationalStiffnessX: TranslationalStiffnessSelect!
	TranslationalStiffnessY: TranslationalStiffnessSelect!
	TranslationalStiffnessZ: TranslationalStiffnessSelect!
	RotationalStiffnessX: RotationalStiffnessSelect!
	RotationalStiffnessY: RotationalStiffnessSelect!
	RotationalStiffnessZ: RotationalStiffnessSelect!
}
type BoundaryCurve{

}
type OuterBoundaryCurve{

}
type CompositeCurveOnSurface{
	BasisSurface: [Surface]!
}
type BoundaryNodeConditionWarping{
	WarpingStiffness: WarpingStiffnessSelect!
}
type CompositeCurve{
	Segments: [CompositeCurveSegment]!
	SelfIntersect: Logical!
	NSegments: Integer!
	ClosedCurve: Logical!
}
type IndexedPolyCurve{
	Points: CartesianPointList!
	Segments: [SegmentIndexSelect]!
	SelfIntersect: Boolean!
}
type Polyline{
	Points: [CartesianPoint]!
}
type TrimmedCurve{
	BasisCurve: Curve!
	Trim1: [TrimmingSelect]!
	Trim2: [TrimmingSelect]!
	SenseAgreement: Boolean!
	MasterRepresentation: TrimmingPreference!
}
type Curve{
	Dim: DimensionCount!
}
type CurveBoundedPlane{
	BasisSurface: Plane!
	OuterBoundary: Curve!
	InnerBoundaries: [Curve]!
}
type CurveBoundedSurface{
	BasisSurface: Surface!
	Boundaries: [BoundaryCurve]!
	ImplicitOuter: Boolean!
}
type RectangularTrimmedSurface{
	BasisSurface: Surface!
	U1: ParameterValue!
	V1: ParameterValue!
	U2: ParameterValue!
	V2: ParameterValue!
	Usense: Boolean!
	Vsense: Boolean!
}
type Surface{
	Dim: DimensionCount!
}
type BoundingBox{
	Corner: CartesianPoint!
	XDim: PositiveLengthMeasure!
	YDim: PositiveLengthMeasure!
	ZDim: PositiveLengthMeasure!
	Dim: DimensionCount!
}
type BoxedHalfSpace{
	Enclosure: BoundingBox!
}
type HalfSpaceSolid{
	BaseSurface: Surface!
	AgreementFlag: Boolean!
	Dim: DimensionCount!
}
type Building{
	ElevationOfRefHeight: LengthMeasure!
	ElevationOfTerrain: LengthMeasure!
	BuildingAddress: PostalAddress!
}
type SpatialStructureElement{
	CompositionType: ElementComposition!
}
type BuildingElementProxy{
	PredefinedType: BuildingElementProxyType!
}
type Chimney{
	PredefinedType: ChimneyType!
}
type Column{
	PredefinedType: ColumnType!
}
type Covering{
	PredefinedType: CoveringType!
	CoversSpaces: [RelCoversSpaces]!
	CoversElements: [RelCoversBldgElements]!
}
type CurtainWall{
	PredefinedType: CurtainWallType!
}
type Door{
	OverallHeight: PositiveLengthMeasure!
	OverallWidth: PositiveLengthMeasure!
	PredefinedType: DoorType!
	OperationType: DoorTypeOperation!
	UserDefinedOperationType: Label!
}
type Footing{
	PredefinedType: FootingType!
}
type Member{
	PredefinedType: MemberType!
}
type Pile{
	PredefinedType: PileType!
	ConstructionType: PileConstruction!
}
type Plate{
	PredefinedType: PlateType!
}
type Railing{
	PredefinedType: RailingType!
}
type Ramp{
	PredefinedType: RampType!
}
type RampFlight{
	PredefinedType: RampFlightType!
}
type Roof{
	PredefinedType: RoofType!
}
type ShadingDevice{
	PredefinedType: ShadingDeviceType!
}
type Slab{
	PredefinedType: SlabType!
}
type Stair{
	PredefinedType: StairType!
}
type StairFlight{
	NumberOfRisers: Integer!
	NumberOfTreads: Integer!
	RiserHeight: PositiveLengthMeasure!
	TreadLength: PositiveLengthMeasure!
	PredefinedType: StairFlightType!
}
type Wall{
	PredefinedType: WallType!
}
type Window{
	OverallHeight: PositiveLengthMeasure!
	OverallWidth: PositiveLengthMeasure!
	PredefinedType: WindowType!
	PartitioningType: WindowTypePartitioning!
	UserDefinedPartitioningType: Label!
}
type Element{
	Tag: Identifier!
	FillsVoids: [RelFillsElement]!
	ConnectedTo: [RelConnectsElements]!
	IsInterferedByElements: [RelInterferesElements]!
	InterferesElements: [RelInterferesElements]!
	HasProjections: [RelProjectsElement]!
	ReferencedInStructures: [RelReferencedInSpatialStructure]!
	HasOpenings: [RelVoidsElement]!
	IsConnectionRealization: [RelConnectsWithRealizingElements]!
	ProvidesBoundaries: [RelSpaceBoundary]!
	ConnectedFrom: [RelConnectsElements]!
	ContainedInStructure: [RelContainedInSpatialStructure]!
	HasCoverings: [RelCoversBldgElements]!
}
type BuildingElementPart{
	PredefinedType: BuildingElementPartType!
}
type ElementComponent{

}
type BuildingElementPartType{
	PredefinedType: BuildingElementPartType!
}
type ElementComponentType{

}
type BuildingElementProxyType{
	PredefinedType: BuildingElementProxyType!
}
type ChimneyType{
	PredefinedType: ChimneyType!
}
type ColumnType{
	PredefinedType: ColumnType!
}
type CoveringType{
	PredefinedType: CoveringType!
}
type CurtainWallType{
	PredefinedType: CurtainWallType!
}
type DoorType{
	PredefinedType: DoorType!
	OperationType: DoorTypeOperation!
	ParameterTakesPrecedence: Boolean!
	UserDefinedOperationType: Label!
}
type FootingType{
	PredefinedType: FootingType!
}
type MemberType{
	PredefinedType: MemberType!
}
type PileType{
	PredefinedType: PileType!
}
type PlateType{
	PredefinedType: PlateType!
}
type RailingType{
	PredefinedType: RailingType!
}
type RampFlightType{
	PredefinedType: RampFlightType!
}
type RampType{
	PredefinedType: RampType!
}
type RoofType{
	PredefinedType: RoofType!
}
type ShadingDeviceType{
	PredefinedType: ShadingDeviceType!
}
type SlabType{
	PredefinedType: SlabType!
}
type StairFlightType{
	PredefinedType: StairFlightType!
}
type StairType{
	PredefinedType: StairType!
}
type WallType{
	PredefinedType: WallType!
}
type WindowType{
	PredefinedType: WindowType!
	PartitioningType: WindowTypePartitioning!
	ParameterTakesPrecedence: Boolean!
	UserDefinedPartitioningType: Label!
}
type ElementType{
	ElementType: Label!
}
type BuildingStorey{
	Elevation: LengthMeasure!
}
type BuildingSystem{
	PredefinedType: BuildingSystemType!
	LongName: Label!
}
type System{
	ServicesBuildings: [RelServicesBuildings]!
}
type Burner{
	PredefinedType: BurnerType!
}
type BurnerType{
	PredefinedType: BurnerType!
}
type CShapeProfileDef{
	Depth: PositiveLengthMeasure!
	Width: PositiveLengthMeasure!
	WallThickness: PositiveLengthMeasure!
	Girth: PositiveLengthMeasure!
	InternalFilletRadius: NonNegativeLengthMeasure!
}
type CableCarrierFitting{
	PredefinedType: CableCarrierFittingType!
}
type FlowFitting{

}
type CableCarrierFittingType{
	PredefinedType: CableCarrierFittingType!
}
type FlowFittingType{

}
type CableCarrierSegment{
	PredefinedType: CableCarrierSegmentType!
}
type FlowSegment{

}
type CableCarrierSegmentType{
	PredefinedType: CableCarrierSegmentType!
}
type FlowSegmentType{

}
type CableFitting{
	PredefinedType: CableFittingType!
}
type CableFittingType{
	PredefinedType: CableFittingType!
}
type CableSegment{
	PredefinedType: CableSegmentType!
}
type CableSegmentType{
	PredefinedType: CableSegmentType!
}
type CartesianPoint{
	Coordinates: [LengthMeasure]!
	Dim: DimensionCount!
}
type Point{

}
type CartesianPointList{
	Dim: DimensionCount!
}
type CartesianPointList2D{
	CoordList: [[LengthMeasure]]!
}
type CartesianPointList3D{
	CoordList: [[LengthMeasure]]!
}
type CartesianTransformationOperator{
	Axis1: Direction!
	Axis2: Direction!
	LocalOrigin: CartesianPoint!
	Scale: Real!
	Scl: Real!
	Dim: DimensionCount!
}
type CartesianTransformationOperator2D{
	U: [Direction]!
}
type CartesianTransformationOperator3D{
	Axis3: Direction!
	U: [Direction]!
}
type CartesianTransformationOperator2DnonUniform{
	Scale2: Real!
	Scl2: Real!
}
type CartesianTransformationOperator3DnonUniform{
	Scale2: Real!
	Scale3: Real!
	Scl2: Real!
	Scl3: Real!
}
type Chiller{
	PredefinedType: ChillerType!
}
type ChillerType{
	PredefinedType: ChillerType!
}
type Circle{
	Radius: PositiveLengthMeasure!
}
type Conic{
	Position: Axis2Placement!
}
type CircleHollowProfileDef{
	WallThickness: PositiveLengthMeasure!
}
type CircleProfileDef{
	Radius: PositiveLengthMeasure!
}
type CivilElement{

}
type CivilElementType{

}
type Classification{
	Source: Label!
	Edition: Label!
	EditionDate: Date!
	Name: Label!
	Description: Text!
	Location: URIReference!
	ReferenceTokens: [Identifier]!
	ClassificationForObjects: [RelAssociatesClassification]!
	HasReferences: [ClassificationReference]!
}
type ExternalInformation{

}
type ClassificationReference{
	ReferencedSource: ClassificationReferenceSelect!
	Description: Text!
	Sort: Identifier!
	ClassificationRefForObjects: [RelAssociatesClassification]!
	HasReferences: [ClassificationReference]!
}
type ExternalReference{
	Location: URIReference!
	Identification: Identifier!
	Name: Label!
	ExternalReferenceForResources: [ExternalReferenceRelationship]!
}
type ClosedShell{

}
type ConnectedFaceSet{
	CfsFaces: [Face]!
}
type Coil{
	PredefinedType: CoilType!
}
type CoilType{
	PredefinedType: CoilType!
}
type ColourRgb{
	Red: NormalisedRatioMeasure!
	Green: NormalisedRatioMeasure!
	Blue: NormalisedRatioMeasure!
}
type ColourSpecification{
	Name: Label!
}
type ColourRgbList{
	ColourList: [[NormalisedRatioMeasure]]!
}
type PresentationItem{

}
type ColumnStandardCase{

}
type CommunicationsAppliance{
	PredefinedType: CommunicationsApplianceType!
}
type CommunicationsApplianceType{
	PredefinedType: CommunicationsApplianceType!
}
type ComplexProperty{
	UsageName: Identifier!
	HasProperties: [Property]!
}
type Property{
	Name: Identifier!
	Description: Text!
	PartOfPset: [PropertySet]!
	PropertyForDependance: [PropertyDependencyRelationship]!
	PropertyDependsOn: [PropertyDependencyRelationship]!
	PartOfComplex: [ComplexProperty]!
	HasConstraints: [ResourceConstraintRelationship]!
	HasApprovals: [ResourceApprovalRelationship]!
}
type ComplexPropertyTemplate{
	UsageName: Label!
	TemplateType: ComplexPropertyTemplateType!
	HasPropertyTemplates: [PropertyTemplate]!
}
type PropertyTemplate{
	PartOfComplexTemplate: [ComplexPropertyTemplate]!
	PartOfPsetTemplate: [PropertySetTemplate]!
}
type CompositeCurveSegment{
	Transition: TransitionCode!
	SameSense: Boolean!
	ParentCurve: Curve!
	Dim: DimensionCount!
	UsingCurves: [CompositeCurve]!
}
type ReparametrisedCompositeCurveSegment{
	ParamLength: ParameterValue!
}
type CompositeProfileDef{
	Profiles: [ProfileDef]!
	Label: Label!
}
type Compressor{
	PredefinedType: CompressorType!
}
type FlowMovingDevice{

}
type CompressorType{
	PredefinedType: CompressorType!
}
type FlowMovingDeviceType{

}
type Condenser{
	PredefinedType: CondenserType!
}
type CondenserType{
	PredefinedType: CondenserType!
}
type Ellipse{
	SemiAxis1: PositiveLengthMeasure!
	SemiAxis2: PositiveLengthMeasure!
}
type OpenShell{

}
type TopologicalRepresentationItem{

}
type ConnectionCurveGeometry{
	CurveOnRelatingElement: CurveOrEdgeCurve!
	CurveOnRelatedElement: CurveOrEdgeCurve!
}
type ConnectionGeometry{

}
type ConnectionPointGeometry{
	PointOnRelatingElement: PointOrVertexPoint!
	PointOnRelatedElement: PointOrVertexPoint!
}
type ConnectionSurfaceGeometry{
	SurfaceOnRelatingElement: SurfaceOrFaceSurface!
	SurfaceOnRelatedElement: SurfaceOrFaceSurface!
}
type ConnectionVolumeGeometry{
	VolumeOnRelatingElement: SolidOrShell!
	VolumeOnRelatedElement: SolidOrShell!
}
type ConnectionPointEccentricity{
	EccentricityInX: LengthMeasure!
	EccentricityInY: LengthMeasure!
	EccentricityInZ: LengthMeasure!
}
type Constraint{
	Name: Label!
	Description: Text!
	ConstraintGrade: Constraint!
	ConstraintSource: Label!
	CreatingActor: ActorSelect!
	CreationTime: DateTime!
	UserDefinedGrade: Label!
	HasExternalReferences: [ExternalReferenceRelationship]!
	PropertiesForConstraint: [ResourceConstraintRelationship]!
}
type Metric{
	Benchmark: Benchmark!
	ValueSource: Label!
	DataValue: MetricValueSelect!
	ReferencePath: Reference!
}
type Objective{
	BenchmarkValues: [Constraint]!
	LogicalAggregator: LogicalOperator!
	ObjectiveQualifier: Objective!
	UserDefinedQualifier: Label!
}
type ConstructionEquipmentResource{
	PredefinedType: ConstructionEquipmentResourceType!
}
type ConstructionResource{
	Usage: ResourceTime!
	BaseCosts: [AppliedValue]!
	BaseQuantity: PhysicalQuantity!
}
type ConstructionEquipmentResourceType{
	PredefinedType: ConstructionEquipmentResourceType!
}
type ConstructionResourceType{
	BaseCosts: [AppliedValue]!
	BaseQuantity: PhysicalQuantity!
}
type ConstructionMaterialResource{
	PredefinedType: ConstructionMaterialResourceType!
}
type ConstructionMaterialResourceType{
	PredefinedType: ConstructionMaterialResourceType!
}
type ConstructionProductResource{
	PredefinedType: ConstructionProductResourceType!
}
type ConstructionProductResourceType{
	PredefinedType: ConstructionProductResourceType!
}
type CrewResource{
	PredefinedType: CrewResourceType!
}
type LaborResource{
	PredefinedType: LaborResourceType!
}
type SubContractResource{
	PredefinedType: SubContractResourceType!
}
type Resource{
	Identification: Identifier!
	LongDescription: Text!
	ResourceOf: [RelAssignsToResource]!
}
type CrewResourceType{
	PredefinedType: CrewResourceType!
}
type LaborResourceType{
	PredefinedType: LaborResourceType!
}
type SubContractResourceType{
	PredefinedType: SubContractResourceType!
}
type TypeResource{
	Identification: Identifier!
	LongDescription: Text!
	ResourceType: Label!
	ResourceOf: [RelAssignsToResource]!
}
type Context{
	ObjectType: Label!
	LongName: Label!
	Phase: Label!
	RepresentationContexts: [RepresentationContext]!
	UnitsInContext: UnitAssignment!
	IsDefinedBy: [RelDefinesByProperties]!
	Declares: [RelDeclares]!
}
type Project{

}
type ProjectLibrary{

}
type ObjectDefinition{
	HasAssignments: [RelAssigns]!
	Nests: [RelNests]!
	IsNestedBy: [RelNests]!
	HasContext: [RelDeclares]!
	IsDecomposedBy: [RelAggregates]!
	Decomposes: [RelAggregates]!
	HasAssociations: [RelAssociates]!
}
type ContextDependentUnit{
	Name: Label!
	HasExternalReference: [ExternalReferenceRelationship]!
}
type NamedUnit{
	Dimensions: DimensionalExponents!
	UnitType: Unit!
}
type CostItem{
	PredefinedType: CostItemType!
	CostValues: [CostValue]!
	CostQuantities: [PhysicalQuantity]!
}
type CostSchedule{
	PredefinedType: CostScheduleType!
	Status: Label!
	SubmittedOn: DateTime!
	UpdateDate: DateTime!
}
type PerformanceHistory{
	LifeCyclePhase: Label!
	PredefinedType: PerformanceHistoryType!
}
type Permit{
	PredefinedType: PermitType!
	Status: Label!
	LongDescription: Text!
}
type ProjectOrder{
	PredefinedType: ProjectOrderType!
	Status: Label!
	LongDescription: Text!
}
type WorkCalendar{
	WorkingTimes: [WorkTime]!
	ExceptionTimes: [WorkTime]!
	PredefinedType: WorkCalendarType!
}
type WorkControl{
	CreationDate: DateTime!
	Creators: [Person]!
	Purpose: Label!
	Duration: Duration!
	TotalFloat: Duration!
	StartTime: DateTime!
	FinishTime: DateTime!
}
type Controller{
	PredefinedType: ControllerType!
}
type ControllerType{
	PredefinedType: ControllerType!
}
type ConversionBasedUnit{
	Name: Label!
	ConversionFactor: MeasureWithUnit!
	HasExternalReference: [ExternalReferenceRelationship]!
}
type ConversionBasedUnitWithOffset{
	ConversionOffset: Real!
}
type CooledBeam{
	PredefinedType: CooledBeamType!
}
type CooledBeamType{
	PredefinedType: CooledBeamType!
}
type CoolingTower{
	PredefinedType: CoolingTowerType!
}
type CoolingTowerType{
	PredefinedType: CoolingTowerType!
}
type CoordinateOperation{
	SourceCRS: CoordinateReferenceSystemSelect!
	TargetCRS: CoordinateReferenceSystem!
}
type MapConversion{
	Eastings: LengthMeasure!
	Northings: LengthMeasure!
	OrthogonalHeight: LengthMeasure!
	XAxisAbscissa: Real!
	XAxisOrdinate: Real!
	Scale: Real!
}
type CoordinateReferenceSystem{
	Name: Label!
	Description: Text!
	GeodeticDatum: Identifier!
	VerticalDatum: Identifier!
	HasCoordinateOperation: [CoordinateOperation]!
}
type ProjectedCRS{
	MapProjection: Identifier!
	MapZone: Identifier!
	MapUnit: NamedUnit!
}
type RectangularPyramid{
	XLength: PositiveLengthMeasure!
	YLength: PositiveLengthMeasure!
	Height: PositiveLengthMeasure!
}
type RightCircularCone{
	Height: PositiveLengthMeasure!
	BottomRadius: PositiveLengthMeasure!
}
type RightCircularCylinder{
	Height: PositiveLengthMeasure!
	Radius: PositiveLengthMeasure!
}
type Sphere{
	Radius: PositiveLengthMeasure!
}
type CsgSolid{
	TreeRootExpression: CsgSelect!
}
type SolidModel{
	Dim: DimensionCount!
}
type CurrencyRelationship{
	RelatingMonetaryUnit: MonetaryUnit!
	RelatedMonetaryUnit: MonetaryUnit!
	ExchangeRate: PositiveRatioMeasure!
	RateDateTime: DateTime!
	RateSource: LibraryInformation!
}
type Line{
	Pnt: CartesianPoint!
	Dir: Vector!
}
type OffsetCurve2D{
	BasisCurve: Curve!
	Distance: LengthMeasure!
	SelfIntersect: Logical!
}
type OffsetCurve3D{
	BasisCurve: Curve!
	Distance: LengthMeasure!
	SelfIntersect: Logical!
	RefDirection: Direction!
}
type Pcurve{
	BasisSurface: Surface!
	ReferenceCurve: Curve!
}
type SurfaceCurve{
	Curve3D: Curve!
	AssociatedGeometry: [Pcurve]!
	MasterRepresentation: PreferredSurfaceCurveRepresentation!
	BasisSurface: [Surface]!
}
type CurveStyle{
	CurveFont: CurveFontOrScaledCurveFontSelect!
	CurveWidth: SizeSelect!
	CurveColour: Colour!
	ModelOrDraughting: Boolean!
}
type PresentationStyle{
	Name: Label!
}
type CurveStyleFont{
	Name: Label!
	PatternList: [CurveStyleFontPattern]!
}
type CurveStyleFontAndScaling{
	Name: Label!
	CurveFont: CurveStyleFontSelect!
	CurveFontScaling: PositiveRatioMeasure!
}
type CurveStyleFontPattern{
	VisibleSegmentLength: LengthMeasure!
	InvisibleSegmentLength: PositiveLengthMeasure!
}
type CylindricalSurface{
	Radius: PositiveLengthMeasure!
}
type ElementarySurface{
	Position: Axis2Placement3D!
}
type Damper{
	PredefinedType: DamperType!
}
type DamperType{
	PredefinedType: DamperType!
}
type DerivedProfileDef{
	ParentProfile: ProfileDef!
	Operator: CartesianTransformationOperator2D!
	Label: Label!
}
type MirroredProfileDef{
	Operator: CartesianTransformationOperator2D!
}
type DerivedUnit{
	Elements: [DerivedUnitElement]!
	UnitType: DerivedUnit!
	UserDefinedType: Label!
	Dimensions: DimensionalExponents!
}
type DerivedUnitElement{
	Unit: NamedUnit!
	Exponent: Int!
}
type DimensionalExponents{
	LengthExponent: Int!
	MassExponent: Int!
	TimeExponent: Int!
	ElectricCurrentExponent: Int!
	ThermodynamicTemperatureExponent: Int!
	AmountOfSubstanceExponent: Int!
	LuminousIntensityExponent: Int!
}
type Direction{
	DirectionRatios: [Real]!
	Dim: DimensionCount!
}
type DiscreteAccessory{
	PredefinedType: DiscreteAccessoryType!
}
type DiscreteAccessoryType{
	PredefinedType: DiscreteAccessoryType!
}
type DistributionChamberElement{
	PredefinedType: DistributionChamberElementType!
}
type DistributionFlowElement{
	HasControlElements: [RelFlowControlElements]!
}
type DistributionChamberElementType{
	PredefinedType: DistributionChamberElementType!
}
type DistributionFlowElementType{

}
type DistributionCircuit{

}
type DistributionSystem{
	LongName: Label!
	PredefinedType: DistributionSystem!
}
type FlowInstrument{
	PredefinedType: FlowInstrumentType!
}
type ProtectiveDeviceTrippingUnit{
	PredefinedType: ProtectiveDeviceTrippingUnitType!
}
type Sensor{
	PredefinedType: SensorType!
}
type UnitaryControlElement{
	PredefinedType: UnitaryControlElementType!
}
type DistributionElement{
	HasPorts: [RelConnectsPortToElement]!
}
type FlowInstrumentType{
	PredefinedType: FlowInstrumentType!
}
type ProtectiveDeviceTrippingUnitType{
	PredefinedType: ProtectiveDeviceTrippingUnitType!
}
type SensorType{
	PredefinedType: SensorType!
}
type UnitaryControlElementType{
	PredefinedType: UnitaryControlElementType!
}
type DistributionElementType{

}
type FlowStorageDevice{

}
type FlowTreatmentDevice{

}
type FlowStorageDeviceType{

}
type FlowTreatmentDeviceType{

}
type DistributionPort{
	FlowDirection: FlowDirection!
	PredefinedType: DistributionPortType!
	SystemType: DistributionSystem!
}
type Port{
	ContainedIn: [RelConnectsPortToElement]!
	ConnectedFrom: [RelConnectsPorts]!
	ConnectedTo: [RelConnectsPorts]!
}
type DocumentInformation{
	Identification: Identifier!
	Name: Label!
	Description: Text!
	Location: URIReference!
	Purpose: Text!
	IntendedUse: Text!
	Scope: Text!
	Revision: Label!
	DocumentOwner: ActorSelect!
	Editors: [ActorSelect]!
	CreationTime: DateTime!
	LastRevisionTime: DateTime!
	ElectronicFormat: Identifier!
	ValidFrom: Date!
	ValidUntil: Date!
	Confidentiality: DocumentConfidentiality!
	Status: DocumentStatus!
	DocumentInfoForObjects: [RelAssociatesDocument]!
	HasDocumentReferences: [DocumentReference]!
	IsPointedTo: [DocumentInformationRelationship]!
	IsPointer: [DocumentInformationRelationship]!
}
type DocumentInformationRelationship{
	RelatingDocument: DocumentInformation!
	RelatedDocuments: [DocumentInformation]!
	RelationshipType: Label!
}
type DocumentReference{
	Description: Text!
	ReferencedDocument: DocumentInformation!
	DocumentRefForObjects: [RelAssociatesDocument]!
}
type DoorStandardCase{

}
type DoorLiningProperties{
	LiningDepth: PositiveLengthMeasure!
	LiningThickness: NonNegativeLengthMeasure!
	ThresholdDepth: PositiveLengthMeasure!
	ThresholdThickness: NonNegativeLengthMeasure!
	TransomThickness: NonNegativeLengthMeasure!
	TransomOffset: LengthMeasure!
	LiningOffset: LengthMeasure!
	ThresholdOffset: LengthMeasure!
	CasingThickness: PositiveLengthMeasure!
	CasingDepth: PositiveLengthMeasure!
	ShapeAspectStyle: ShapeAspect!
	LiningToPanelOffsetX: LengthMeasure!
	LiningToPanelOffsetY: LengthMeasure!
}
type PreDefinedPropertySet{

}
type DoorPanelProperties{
	PanelDepth: PositiveLengthMeasure!
	PanelOperation: DoorPanelOperation!
	PanelWidth: NormalisedRatioMeasure!
	PanelPosition: DoorPanelPosition!
	ShapeAspectStyle: ShapeAspect!
}
type DoorStyle{
	OperationType: DoorStyleOperation!
	ConstructionType: DoorStyleConstruction!
	ParameterTakesPrecedence: Boolean!
	Sizeable: Boolean!
}
type TypeProduct{
	RepresentationMaps: [RepresentationMap]!
	Tag: Label!
	ReferencedBy: [RelAssignsToProduct]!
}
type DraughtingPreDefinedColour{

}
type PreDefinedColour{

}
type DraughtingPreDefinedCurveFont{

}
type PreDefinedCurveFont{

}
type DuctFitting{
	PredefinedType: DuctFittingType!
}
type DuctFittingType{
	PredefinedType: DuctFittingType!
}
type DuctSegment{
	PredefinedType: DuctSegmentType!
}
type DuctSegmentType{
	PredefinedType: DuctSegmentType!
}
type DuctSilencer{
	PredefinedType: DuctSilencerType!
}
type DuctSilencerType{
	PredefinedType: DuctSilencerType!
}
type Edge{
	EdgeStart: Vertex!
	EdgeEnd: Vertex!
}
type EdgeCurve{
	EdgeGeometry: Curve!
	SameSense: Boolean!
}
type OrientedEdge{
	EdgeElement: Edge!
	Orientation: Boolean!
	EdgeStart: Vertex!
	EdgeEnd: Vertex!
}
type Subedge{
	ParentEdge: Edge!
}
type EdgeLoop{
	EdgeList: [OrientedEdge]!
	Ne: Integer!
}
type Loop{

}
type ElectricAppliance{
	PredefinedType: ElectricApplianceType!
}
type ElectricApplianceType{
	PredefinedType: ElectricApplianceType!
}
type ElectricDistributionBoard{
	PredefinedType: ElectricDistributionBoardType!
}
type ElectricDistributionBoardType{
	PredefinedType: ElectricDistributionBoardType!
}
type ElectricFlowStorageDevice{
	PredefinedType: ElectricFlowStorageDeviceType!
}
type ElectricFlowStorageDeviceType{
	PredefinedType: ElectricFlowStorageDeviceType!
}
type ElectricGenerator{
	PredefinedType: ElectricGeneratorType!
}
type ElectricGeneratorType{
	PredefinedType: ElectricGeneratorType!
}
type ElectricMotor{
	PredefinedType: ElectricMotorType!
}
type ElectricMotorType{
	PredefinedType: ElectricMotorType!
}
type ElectricTimeControl{
	PredefinedType: ElectricTimeControlType!
}
type ElectricTimeControlType{
	PredefinedType: ElectricTimeControlType!
}
type ElementAssembly{
	AssemblyPlace: AssemblyPlace!
	PredefinedType: ElementAssemblyType!
}
type FeatureElement{

}
type FurnishingElement{

}
type GeographicElement{
	PredefinedType: GeographicElementType!
}
type TransportElement{
	PredefinedType: TransportElementType!
}
type VirtualElement{

}
type ElementAssemblyType{
	PredefinedType: ElementAssemblyType!
}
type Fastener{
	PredefinedType: FastenerType!
}
type MechanicalFastener{
	NominalDiameter: PositiveLengthMeasure!
	NominalLength: PositiveLengthMeasure!
	PredefinedType: MechanicalFastenerType!
}
type ReinforcingElement{
	SteelGrade: Label!
}
type VibrationIsolator{
	PredefinedType: VibrationIsolatorType!
}
type FastenerType{
	PredefinedType: FastenerType!
}
type MechanicalFastenerType{
	PredefinedType: MechanicalFastenerType!
	NominalDiameter: PositiveLengthMeasure!
	NominalLength: PositiveLengthMeasure!
}
type ReinforcingElementType{

}
type VibrationIsolatorType{
	PredefinedType: VibrationIsolatorType!
}
type ElementQuantity{
	MethodOfMeasurement: Label!
	Quantities: [PhysicalQuantity]!
}
type QuantitySet{

}
type FurnishingElementType{

}
type GeographicElementType{
	PredefinedType: GeographicElementType!
}
type TransportElementType{
	PredefinedType: TransportElementType!
}
type Plane{

}
type SphericalSurface{
	Radius: PositiveLengthMeasure!
}
type ToroidalSurface{
	MajorRadius: PositiveLengthMeasure!
	MinorRadius: PositiveLengthMeasure!
}
type EllipseProfileDef{
	SemiAxis1: PositiveLengthMeasure!
	SemiAxis2: PositiveLengthMeasure!
}
type Engine{
	PredefinedType: EngineType!
}
type EvaporativeCooler{
	PredefinedType: EvaporativeCoolerType!
}
type Evaporator{
	PredefinedType: EvaporatorType!
}
type HeatExchanger{
	PredefinedType: HeatExchangerType!
}
type Humidifier{
	PredefinedType: HumidifierType!
}
type MotorConnection{
	PredefinedType: MotorConnectionType!
}
type SolarDevice{
	PredefinedType: SolarDeviceType!
}
type Transformer{
	PredefinedType: TransformerType!
}
type TubeBundle{
	PredefinedType: TubeBundleType!
}
type UnitaryEquipment{
	PredefinedType: UnitaryEquipmentType!
}
type EngineType{
	PredefinedType: EngineType!
}
type EvaporativeCoolerType{
	PredefinedType: EvaporativeCoolerType!
}
type EvaporatorType{
	PredefinedType: EvaporatorType!
}
type HeatExchangerType{
	PredefinedType: HeatExchangerType!
}
type HumidifierType{
	PredefinedType: HumidifierType!
}
type MotorConnectionType{
	PredefinedType: MotorConnectionType!
}
type SolarDeviceType{
	PredefinedType: SolarDeviceType!
}
type TransformerType{
	PredefinedType: TransformerType!
}
type TubeBundleType{
	PredefinedType: TubeBundleType!
}
type UnitaryEquipmentType{
	PredefinedType: UnitaryEquipmentType!
}
type Event{
	PredefinedType: EventType!
	EventTriggerType: EventTriggerType!
	UserDefinedEventTriggerType: Label!
	EventOccurenceTime: EventTime!
}
type Process{
	Identification: Identifier!
	LongDescription: Text!
	IsPredecessorTo: [RelSequence]!
	IsSuccessorFrom: [RelSequence]!
	OperatesOn: [RelAssignsToProcess]!
}
type EventTime{
	ActualDate: DateTime!
	EarlyDate: DateTime!
	LateDate: DateTime!
	ScheduleDate: DateTime!
}
type SchedulingTime{
	Name: Label!
	DataOrigin: DataOrigin!
	UserDefinedDataOrigin: Label!
}
type EventType{
	PredefinedType: EventType!
	EventTriggerType: EventTriggerType!
	UserDefinedEventTriggerType: Label!
}
type TypeProcess{
	Identification: Identifier!
	LongDescription: Text!
	ProcessType: Label!
	OperatesOn: [RelAssignsToProcess]!
}
type ExtendedProperties{
	Name: Identifier!
	Description: Text!
	Properties: [Property]!
}
type MaterialProperties{
	Material: MaterialDefinition!
}
type ProfileProperties{
	ProfileDefinition: ProfileDef!
}
type PropertyAbstraction{
	HasExternalReferences: [ExternalReferenceRelationship]!
}
type LibraryInformation{
	Name: Label!
	Version: Label!
	Publisher: ActorSelect!
	VersionDate: DateTime!
	Location: URIReference!
	Description: Text!
	LibraryInfoForObjects: [RelAssociatesLibrary]!
	HasLibraryReferences: [LibraryReference]!
}
type ExternallyDefinedHatchStyle{

}
type ExternallyDefinedSurfaceStyle{

}
type ExternallyDefinedTextFont{

}
type LibraryReference{
	Description: Text!
	Language: LanguageId!
	ReferencedLibrary: LibraryInformation!
	LibraryRefForObjects: [RelAssociatesLibrary]!
}
type ExternalReferenceRelationship{
	RelatingReference: ExternalReference!
	RelatedResourceObjects: [ResourceObjectSelect]!
}
type ExternalSpatialElement{
	PredefinedType: ExternalSpatialElementType!
	BoundedBy: [RelSpaceBoundary]!
}
type ExternalSpatialStructureElement{

}
type SpatialElement{
	LongName: Label!
	ContainsElements: [RelContainedInSpatialStructure]!
	ServicedBySystems: [RelServicesBuildings]!
	ReferencesElements: [RelReferencedInSpatialStructure]!
}
type ExtrudedAreaSolid{
	ExtrudedDirection: Direction!
	Depth: PositiveLengthMeasure!
}
type ExtrudedAreaSolidTapered{
	EndSweptArea: ProfileDef!
}
type SweptAreaSolid{
	SweptArea: ProfileDef!
	Position: Axis2Placement3D!
}
type Face{
	Bounds: [FaceBound]!
	HasTextureMaps: [TextureMap]!
}
type FaceBasedSurfaceModel{
	FbsmFaces: [ConnectedFaceSet]!
	Dim: DimensionCount!
}
type FaceBound{
	Bound: Loop!
	Orientation: Boolean!
}
type FaceOuterBound{

}
type FacetedBrep{

}
type FacetedBrepWithVoids{
	Voids: [ClosedShell]!
}
type FailureConnectionCondition{
	TensionFailureX: ForceMeasure!
	TensionFailureY: ForceMeasure!
	TensionFailureZ: ForceMeasure!
	CompressionFailureX: ForceMeasure!
	CompressionFailureY: ForceMeasure!
	CompressionFailureZ: ForceMeasure!
}
type StructuralConnectionCondition{
	Name: Label!
}
type Fan{
	PredefinedType: FanType!
}
type FanType{
	PredefinedType: FanType!
}
type FeatureElementAddition{
	ProjectsElements: RelProjectsElement!
}
type FeatureElementSubtraction{
	VoidsElements: RelVoidsElement!
}
type SurfaceFeature{
	PredefinedType: SurfaceFeatureType!
}
type ProjectionElement{
	PredefinedType: ProjectionElementType!
}
type OpeningElement{
	PredefinedType: OpeningElementType!
	HasFillings: [RelFillsElement]!
}
type VoidingFeature{
	PredefinedType: VoidingFeatureType!
}
type FillAreaStyle{
	FillStyles: [FillStyleSelect]!
	ModelorDraughting: Boolean!
}
type FillAreaStyleHatching{
	HatchLineAppearance: CurveStyle!
	StartOfNextHatchLine: HatchLineDistanceSelect!
	PointOfReferenceHatchLine: CartesianPoint!
	PatternStart: CartesianPoint!
	HatchLineAngle: PlaneAngleMeasure!
}
type FillAreaStyleTiles{
	TilingPattern: [Vector]!
	Tiles: [StyledItem]!
	TilingScale: PositiveRatioMeasure!
}
type Filter{
	PredefinedType: FilterType!
}
type FilterType{
	PredefinedType: FilterType!
}
type FireSuppressionTerminal{
	PredefinedType: FireSuppressionTerminalType!
}
type FireSuppressionTerminalType{
	PredefinedType: FireSuppressionTerminalType!
}
type FixedReferenceSweptAreaSolid{
	Directrix: Curve!
	StartParam: ParameterValue!
	EndParam: ParameterValue!
	FixedReference: Direction!
}
type FlowMeter{
	PredefinedType: FlowMeterType!
}
type ProtectiveDevice{
	PredefinedType: ProtectiveDeviceType!
}
type SwitchingDevice{
	PredefinedType: SwitchingDeviceType!
}
type Valve{
	PredefinedType: ValveType!
}
type FlowMeterType{
	PredefinedType: FlowMeterType!
}
type ProtectiveDeviceType{
	PredefinedType: ProtectiveDeviceType!
}
type SwitchingDeviceType{
	PredefinedType: SwitchingDeviceType!
}
type ValveType{
	PredefinedType: ValveType!
}
type JunctionBox{
	PredefinedType: JunctionBoxType!
}
type PipeFitting{
	PredefinedType: PipeFittingType!
}
type JunctionBoxType{
	PredefinedType: JunctionBoxType!
}
type PipeFittingType{
	PredefinedType: PipeFittingType!
}
type Pump{
	PredefinedType: PumpType!
}
type PumpType{
	PredefinedType: PumpType!
}
type PipeSegment{
	PredefinedType: PipeSegmentType!
}
type PipeSegmentType{
	PredefinedType: PipeSegmentType!
}
type Tank{
	PredefinedType: TankType!
}
type TankType{
	PredefinedType: TankType!
}
type Lamp{
	PredefinedType: LampType!
}
type LightFixture{
	PredefinedType: LightFixtureType!
}
type MedicalDevice{
	PredefinedType: MedicalDeviceType!
}
type Outlet{
	PredefinedType: OutletType!
}
type SanitaryTerminal{
	PredefinedType: SanitaryTerminalType!
}
type SpaceHeater{
	PredefinedType: SpaceHeaterType!
}
type StackTerminal{
	PredefinedType: StackTerminalType!
}
type WasteTerminal{
	PredefinedType: WasteTerminalType!
}
type LampType{
	PredefinedType: LampType!
}
type LightFixtureType{
	PredefinedType: LightFixtureType!
}
type MedicalDeviceType{
	PredefinedType: MedicalDeviceType!
}
type OutletType{
	PredefinedType: OutletType!
}
type SanitaryTerminalType{
	PredefinedType: SanitaryTerminalType!
}
type SpaceHeaterType{
	PredefinedType: SpaceHeaterType!
}
type StackTerminalType{
	PredefinedType: StackTerminalType!
}
type WasteTerminalType{
	PredefinedType: WasteTerminalType!
}
type Interceptor{
	PredefinedType: InterceptorType!
}
type InterceptorType{
	PredefinedType: InterceptorType!
}
type Furniture{
	PredefinedType: FurnitureType!
}
type SystemFurnitureElement{
	PredefinedType: SystemFurnitureElementType!
}
type FurnitureType{
	AssemblyPlace: AssemblyPlace!
	PredefinedType: FurnitureType!
}
type SystemFurnitureElementType{
	PredefinedType: SystemFurnitureElementType!
}
type GeometricCurveSet{

}
type GeometricSet{
	Elements: [GeometricSetSelect]!
	Dim: DimensionCount!
}
type GeometricRepresentationContext{
	CoordinateSpaceDimension: DimensionCount!
	Precision: Real!
	WorldCoordinateSystem: Axis2Placement!
	TrueNorth: Direction!
	HasSubContexts: [GeometricRepresentationSubContext]!
	HasCoordinateOperation: [CoordinateOperation]!
}
type GeometricRepresentationSubContext{
	ParentContext: GeometricRepresentationContext!
	TargetScale: PositiveRatioMeasure!
	TargetView: GeometricProjection!
	UserDefinedTargetView: Label!
	WorldCoordinateSystem: Axis2Placement!
	CoordinateSpaceDimension: DimensionCount!
	TrueNorth: Direction!
	Precision: Real!
}
type RepresentationContext{
	ContextIdentifier: Label!
	ContextType: Label!
	RepresentationsInContext: [Representation]!
}
type LightSource{
	Name: Label!
	LightColour: ColourRgb!
	AmbientIntensity: NormalisedRatioMeasure!
	Intensity: NormalisedRatioMeasure!
}
type PlanarExtent{
	SizeInX: LengthMeasure!
	SizeInY: LengthMeasure!
}
type SectionedSpine{
	SpineCurve: CompositeCurve!
	CrossSections: [ProfileDef]!
	CrossSectionPositions: [Axis2Placement3D]!
	Dim: DimensionCount!
}
type ShellBasedSurfaceModel{
	SbsmBoundary: [Shell]!
	Dim: DimensionCount!
}
type TessellatedItem{

}
type TextLiteral{
	Literal: PresentableText!
	Placement: Axis2Placement!
	Path: TextPath!
}
type Vector{
	Orientation: Direction!
	Magnitude: LengthMeasure!
	Dim: DimensionCount!
}
type RepresentationItem{
	LayerAssignment: [PresentationLayerAssignment]!
	StyledByItem: [StyledItem]!
}
type Grid{
	UAxes: [GridAxis]!
	VAxes: [GridAxis]!
	WAxes: [GridAxis]!
	PredefinedType: GridType!
	ContainedInStructure: [RelContainedInSpatialStructure]!
}
type GridAxis{
	AxisTag: Label!
	AxisCurve: Curve!
	SameSense: Boolean!
	PartOfW: [Grid]!
	PartOfV: [Grid]!
	PartOfU: [Grid]!
	HasIntersections: [VirtualGridIntersection]!
}
type GridPlacement{
	PlacementLocation: VirtualGridIntersection!
	PlacementRefDirection: GridPlacementDirectionSelect!
}
type ObjectPlacement{
	PlacesObject: [Product]!
	ReferencedByPlacements: [LocalPlacement]!
}
type Inventory{
	PredefinedType: InventoryType!
	Jurisdiction: ActorSelect!
	ResponsiblePersons: [Person]!
	LastUpdateDate: Date!
	CurrentValue: CostValue!
	OriginalValue: CostValue!
}
type StructuralLoadGroup{
	PredefinedType: LoadGroupType!
	ActionType: ActionType!
	ActionSource: ActionSourceType!
	Coefficient: RatioMeasure!
	Purpose: Label!
	SourceOfResultGroup: [StructuralResultGroup]!
	LoadGroupFor: [StructuralAnalysisModel]!
}
type StructuralResultGroup{
	TheoryType: AnalysisTheoryType!
	ResultForLoadGroup: StructuralLoadGroup!
	IsLinear: Boolean!
	ResultGroupFor: [StructuralAnalysisModel]!
}
type PolygonalBoundedHalfSpace{
	Position: Axis2Placement3D!
	PolygonalBoundary: BoundedCurve!
}
type IShapeProfileDef{
	OverallWidth: PositiveLengthMeasure!
	OverallDepth: PositiveLengthMeasure!
	WebThickness: PositiveLengthMeasure!
	FlangeThickness: PositiveLengthMeasure!
	FilletRadius: NonNegativeLengthMeasure!
	FlangeEdgeRadius: NonNegativeLengthMeasure!
	FlangeSlope: PlaneAngleMeasure!
}
type ImageTexture{
	URLReference: URIReference!
}
type IndexedColourMap{
	MappedTo: TessellatedFaceSet!
	Opacity: NormalisedRatioMeasure!
	Colours: ColourRgbList!
	ColourIndex: [PositiveInteger]!
}
type IndexedPolygonalFace{
	CoordIndex: [PositiveInteger]!
	ToFaceSet: [PolygonalFaceSet]!
}
type IndexedPolygonalFaceWithVoids{
	InnerCoordIndices: [[PositiveInteger]]!
}
type IndexedTextureMap{
	MappedTo: TessellatedFaceSet!
	TexCoords: TextureVertexList!
}
type IndexedTriangleTextureMap{
	TexCoordIndex: [[PositiveInteger]]!
}
type TextureCoordinate{
	Maps: [SurfaceTexture]!
}
type IntersectionCurve{

}
type IrregularTimeSeries{
	Values: [IrregularTimeSeriesValue]!
}
type TimeSeries{
	Name: Label!
	Description: Text!
	StartTime: DateTime!
	EndTime: DateTime!
	TimeSeriesDataType: TimeSeriesDataType!
	DataOrigin: DataOrigin!
	UserDefinedDataOrigin: Label!
	Unit: Unit!
	HasExternalReference: [ExternalReferenceRelationship]!
}
type IrregularTimeSeriesValue{
	TimeStamp: DateTime!
	ListValues: [Value]!
}
type LShapeProfileDef{
	Depth: PositiveLengthMeasure!
	Width: PositiveLengthMeasure!
	Thickness: PositiveLengthMeasure!
	FilletRadius: NonNegativeLengthMeasure!
	EdgeRadius: NonNegativeLengthMeasure!
	LegSlope: PlaneAngleMeasure!
}
type LagTime{
	LagValue: TimeOrRatioSelect!
	DurationType: TaskDuration!
}
type LightDistributionData{
	MainPlaneAngle: PlaneAngleMeasure!
	SecondaryPlaneAngle: [PlaneAngleMeasure]!
	LuminousIntensity: [LuminousIntensityDistributionMeasure]!
}
type LightIntensityDistribution{
	LightDistributionCurve: LightDistributionCurve!
	DistributionData: [LightDistributionData]!
}
type LightSourceAmbient{

}
type LightSourceDirectional{
	Orientation: Direction!
}
type LightSourceGoniometric{
	Position: Axis2Placement3D!
	ColourAppearance: ColourRgb!
	ColourTemperature: ThermodynamicTemperatureMeasure!
	LuminousFlux: LuminousFluxMeasure!
	LightEmissionSource: LightEmissionSource!
	LightDistributionDataSource: LightDistributionDataSourceSelect!
}
type LightSourcePositional{
	Position: CartesianPoint!
	Radius: PositiveLengthMeasure!
	ConstantAttenuation: Real!
	DistanceAttenuation: Real!
	QuadricAttenuation: Real!
}
type LightSourceSpot{
	Orientation: Direction!
	ConcentrationExponent: Real!
	SpreadAngle: PositivePlaneAngleMeasure!
	BeamWidthAngle: PositivePlaneAngleMeasure!
}
type LocalPlacement{
	PlacementRelTo: ObjectPlacement!
	RelativePlacement: Axis2Placement!
}
type PolyLoop{
	Polygon: [CartesianPoint]!
}
type VertexLoop{
	LoopVertex: Vertex!
}
type MappedItem{
	MappingSource: RepresentationMap!
	MappingTarget: CartesianTransformationOperator!
}
type Material{
	Name: Label!
	Description: Text!
	Category: Label!
	HasRepresentation: [MaterialDefinitionRepresentation]!
	IsRelatedWith: [MaterialRelationship]!
	RelatesTo: [MaterialRelationship]!
}
type MaterialDefinition{
	AssociatedTo: [RelAssociatesMaterial]!
	HasExternalReferences: [ExternalReferenceRelationship]!
	HasProperties: [MaterialProperties]!
}
type MaterialClassificationRelationship{
	MaterialClassifications: [ClassificationSelect]!
	ClassifiedMaterial: Material!
}
type MaterialConstituent{
	Name: Label!
	Description: Text!
	Material: Material!
	Fraction: NormalisedRatioMeasure!
	Category: Label!
	ToMaterialConstituentSet: MaterialConstituentSet!
}
type MaterialConstituentSet{
	Name: Label!
	Description: Text!
	MaterialConstituents: [MaterialConstituent]!
}
type MaterialLayer{
	Material: Material!
	LayerThickness: NonNegativeLengthMeasure!
	IsVentilated: Logical!
	Name: Label!
	Description: Text!
	Category: Label!
	Priority: Integer!
	ToMaterialLayerSet: MaterialLayerSet!
}
type MaterialLayerSet{
	MaterialLayers: [MaterialLayer]!
	LayerSetName: Label!
	Description: Text!
	TotalThickness: LengthMeasure!
}
type MaterialProfile{
	Name: Label!
	Description: Text!
	Material: Material!
	Profile: ProfileDef!
	Priority: Integer!
	Category: Label!
	ToMaterialProfileSet: MaterialProfileSet!
}
type MaterialProfileSet{
	Name: Label!
	Description: Text!
	MaterialProfiles: [MaterialProfile]!
	CompositeProfile: CompositeProfileDef!
}
type MaterialDefinitionRepresentation{
	RepresentedMaterial: Material!
}
type ProductRepresentation{
	Name: Label!
	Description: Text!
	Representations: [Representation]!
}
type MaterialLayerWithOffsets{
	OffsetDirection: LayerSetDirection!
	OffsetValues: [LengthMeasure]!
}
type MaterialLayerSetUsage{
	ForLayerSet: MaterialLayerSet!
	LayerSetDirection: LayerSetDirection!
	DirectionSense: DirectionSense!
	OffsetFromReferenceLine: LengthMeasure!
	ReferenceExtent: PositiveLengthMeasure!
}
type MaterialUsageDefinition{
	AssociatedTo: [RelAssociatesMaterial]!
}
type MaterialList{
	Materials: [Material]!
}
type MaterialProfileWithOffsets{
	OffsetValues: [LengthMeasure]!
}
type MaterialProfileSetUsage{
	ForProfileSet: MaterialProfileSet!
	CardinalPoint: CardinalPointReference!
	ReferenceExtent: PositiveLengthMeasure!
}
type MaterialProfileSetUsageTapering{
	ForProfileEndSet: MaterialProfileSet!
	CardinalEndPoint: CardinalPointReference!
}
type MaterialRelationship{
	RelatingMaterial: Material!
	RelatedMaterials: [Material]!
	Expression: Label!
}
type MeasureWithUnit{
	ValueComponent: Value!
	UnitComponent: Unit!
}
type MemberStandardCase{

}
type MonetaryUnit{
	Currency: Label!
}
type SIUnit{
	Prefix: SIPrefix!
	Name: SIUnitName!
	Dimensions: DimensionalExponents!
}
type TypeObject{
	ApplicableOccurrence: Identifier!
	HasPropertySets: [PropertySetDefinition]!
	Types: [RelDefinesByType]!
}
type Root{
	GlobalId: GloballyUniqueId!
	OwnerHistory: OwnerHistory!
	Name: Label!
	Description: Text!
}
type OpeningStandardCase{

}
type Organization{
	Identification: Identifier!
	Name: Label!
	Description: Text!
	Roles: [ActorRole]!
	Addresses: [Address]!
	IsRelatedBy: [OrganizationRelationship]!
	Relates: [OrganizationRelationship]!
	Engages: [PersonAndOrganization]!
}
type OrganizationRelationship{
	RelatingOrganization: Organization!
	RelatedOrganizations: [Organization]!
}
type OwnerHistory{
	OwningUser: PersonAndOrganization!
	OwningApplication: Application!
	State: State!
	ChangeAction: ChangeAction!
	LastModifiedDate: TimeStamp!
	LastModifyingUser: PersonAndOrganization!
	LastModifyingApplication: Application!
	CreationDate: TimeStamp!
}
type RectangleProfileDef{
	XDim: PositiveLengthMeasure!
	YDim: PositiveLengthMeasure!
}
type TShapeProfileDef{
	Depth: PositiveLengthMeasure!
	FlangeWidth: PositiveLengthMeasure!
	WebThickness: PositiveLengthMeasure!
	FlangeThickness: PositiveLengthMeasure!
	FilletRadius: NonNegativeLengthMeasure!
	FlangeEdgeRadius: NonNegativeLengthMeasure!
	WebEdgeRadius: NonNegativeLengthMeasure!
	WebSlope: PlaneAngleMeasure!
	FlangeSlope: PlaneAngleMeasure!
}
type TrapeziumProfileDef{
	BottomXDim: PositiveLengthMeasure!
	TopXDim: PositiveLengthMeasure!
	YDim: PositiveLengthMeasure!
	TopXOffset: LengthMeasure!
}
type UShapeProfileDef{
	Depth: PositiveLengthMeasure!
	FlangeWidth: PositiveLengthMeasure!
	WebThickness: PositiveLengthMeasure!
	FlangeThickness: PositiveLengthMeasure!
	FilletRadius: NonNegativeLengthMeasure!
	EdgeRadius: NonNegativeLengthMeasure!
	FlangeSlope: PlaneAngleMeasure!
}
type ZShapeProfileDef{
	Depth: PositiveLengthMeasure!
	FlangeWidth: PositiveLengthMeasure!
	WebThickness: PositiveLengthMeasure!
	FlangeThickness: PositiveLengthMeasure!
	FilletRadius: NonNegativeLengthMeasure!
	EdgeRadius: NonNegativeLengthMeasure!
}
type Path{
	EdgeList: [OrientedEdge]!
}
type PermeableCoveringProperties{
	OperationType: PermeableCoveringOperation!
	PanelPosition: WindowPanelPosition!
	FrameDepth: PositiveLengthMeasure!
	FrameThickness: PositiveLengthMeasure!
	ShapeAspectStyle: ShapeAspect!
}
type Person{
	Identification: Identifier!
	FamilyName: Label!
	GivenName: Label!
	MiddleNames: [Label]!
	PrefixTitles: [Label]!
	SuffixTitles: [Label]!
	Roles: [ActorRole]!
	Addresses: [Address]!
	EngagedIn: [PersonAndOrganization]!
}
type PersonAndOrganization{
	ThePerson: Person!
	TheOrganization: Organization!
	Roles: [ActorRole]!
}
type PhysicalComplexQuantity{
	HasQuantities: [PhysicalQuantity]!
	Discrimination: Label!
	Quality: Label!
	Usage: Label!
}
type PhysicalQuantity{
	Name: Label!
	Description: Text!
	HasExternalReferences: [ExternalReferenceRelationship]!
	PartOfComplex: [PhysicalComplexQuantity]!
}
type PhysicalSimpleQuantity{
	Unit: NamedUnit!
}
type QuantityArea{
	AreaValue: AreaMeasure!
	Formula: Label!
}
type QuantityCount{
	CountValue: CountMeasure!
	Formula: Label!
}
type QuantityLength{
	LengthValue: LengthMeasure!
	Formula: Label!
}
type QuantityTime{
	TimeValue: TimeMeasure!
	Formula: Label!
}
type QuantityVolume{
	VolumeValue: VolumeMeasure!
	Formula: Label!
}
type QuantityWeight{
	WeightValue: MassMeasure!
	Formula: Label!
}
type PixelTexture{
	Width: Integer!
	Height: Integer!
	ColourComponents: Integer!
	Pixel: [Binary]!
}
type PlanarBox{
	Placement: Axis2Placement!
}
type PlateStandardCase{

}
type PointOnCurve{
	BasisCurve: Curve!
	PointParameter: ParameterValue!
	Dim: DimensionCount!
}
type PointOnSurface{
	BasisSurface: Surface!
	PointParameterU: ParameterValue!
	PointParameterV: ParameterValue!
	Dim: DimensionCount!
}
type PolygonalFaceSet{
	Closed: Boolean!
	Faces: [IndexedPolygonalFace]!
	PnIndex: [PositiveInteger]!
}
type TessellatedFaceSet{
	Coordinates: CartesianPointList3D!
	Dim: DimensionCount!
	HasColours: [IndexedColourMap]!
	HasTextures: [IndexedTextureMap]!
}
type PreDefinedItem{
	Name: Label!
}
type PreDefinedTextFont{

}
type PreDefinedProperties{

}
type ReinforcementBarProperties{
	TotalCrossSectionArea: AreaMeasure!
	SteelGrade: Label!
	BarSurface: ReinforcingBarSurface!
	EffectiveDepth: LengthMeasure!
	NominalBarDiameter: PositiveLengthMeasure!
	BarCount: CountMeasure!
}
type SectionProperties{
	SectionType: SectionType!
	StartProfile: ProfileDef!
	EndProfile: ProfileDef!
}
type SectionReinforcementProperties{
	LongitudinalStartPosition: LengthMeasure!
	LongitudinalEndPosition: LengthMeasure!
	TransversePosition: LengthMeasure!
	ReinforcementRole: ReinforcingBarRole!
	SectionDefinition: SectionProperties!
	CrossSectionReinforcementDefinitions: [ReinforcementBarProperties]!
}
type ReinforcementDefinitionProperties{
	DefinitionType: Label!
	ReinforcementSectionDefinitions: [SectionReinforcementProperties]!
}
type WindowLiningProperties{
	LiningDepth: PositiveLengthMeasure!
	LiningThickness: NonNegativeLengthMeasure!
	TransomThickness: NonNegativeLengthMeasure!
	MullionThickness: NonNegativeLengthMeasure!
	FirstTransomOffset: NormalisedRatioMeasure!
	SecondTransomOffset: NormalisedRatioMeasure!
	FirstMullionOffset: NormalisedRatioMeasure!
	SecondMullionOffset: NormalisedRatioMeasure!
	ShapeAspectStyle: ShapeAspect!
	LiningOffset: LengthMeasure!
	LiningToPanelOffsetX: LengthMeasure!
	LiningToPanelOffsetY: LengthMeasure!
}
type WindowPanelProperties{
	OperationType: WindowPanelOperation!
	PanelPosition: WindowPanelPosition!
	FrameDepth: PositiveLengthMeasure!
	FrameThickness: PositiveLengthMeasure!
	ShapeAspectStyle: ShapeAspect!
}
type PropertySetDefinition{
	DefinesType: [TypeObject]!
	IsDefinedBy: [RelDefinesByTemplate]!
	DefinesOccurrence: [RelDefinesByProperties]!
}
type TextStyleFontModel{
	FontFamily: [TextFontName]!
	FontStyle: FontStyle!
	FontVariant: FontVariant!
	FontWeight: FontWeight!
	FontSize: SizeSelect!
}
type SurfaceStyleLighting{
	DiffuseTransmissionColour: ColourRgb!
	DiffuseReflectionColour: ColourRgb!
	TransmissionColour: ColourRgb!
	ReflectanceColour: ColourRgb!
}
type SurfaceStyleRefraction{
	RefractionIndex: Real!
	DispersionFactor: Real!
}
type SurfaceStyleShading{
	SurfaceColour: ColourRgb!
	Transparency: NormalisedRatioMeasure!
}
type SurfaceStyleWithTextures{
	Textures: [SurfaceTexture]!
}
type TextStyleForDefinedFont{
	Colour: Colour!
	BackgroundColour: Colour!
}
type TextStyleTextModel{
	TextIndent: SizeSelect!
	TextAlign: TextAlignment!
	TextDecoration: TextDecoration!
	LetterSpacing: SizeSelect!
	WordSpacing: SizeSelect!
	TextTransform: TextTransformation!
	LineHeight: SizeSelect!
}
type TextureVertex{
	Coordinates: [ParameterValue]!
}
type TextureVertexList{
	TexCoordsList: [[ParameterValue]]!
}
type PresentationLayerAssignment{
	Name: Label!
	Description: Text!
	AssignedItems: [LayeredItem]!
	Identifier: Identifier!
}
type PresentationLayerWithStyle{
	LayerOn: Logical!
	LayerFrozen: Logical!
	LayerBlocked: Logical!
	LayerStyles: [PresentationStyle]!
}
type SurfaceStyle{
	Side: SurfaceSide!
	Styles: [SurfaceStyleElementSelect]!
}
type TextStyle{
	TextCharacterAppearance: TextStyleForDefinedFont!
	TextStyle: TextStyleTextModel!
	TextFontStyle: TextFontSelect!
	ModelOrDraughting: Boolean!
}
type PresentationStyleAssignment{
	Styles: [PresentationStyleSelect]!
}
type Procedure{
	PredefinedType: ProcedureType!
}
type ProcedureType{
	PredefinedType: ProcedureType!
}
type Task{
	Status: Label!
	WorkMethod: Label!
	IsMilestone: Boolean!
	Priority: Integer!
	TaskTime: TaskTime!
	PredefinedType: TaskType!
}
type Proxy{
	ProxyType: ObjectType!
	Tag: Label!
}
type StructuralActivity{
	AppliedLoad: StructuralLoad!
	GlobalOrLocal: GlobalOrLocal!
	AssignedToStructuralItem: [RelConnectsStructuralActivity]!
}
type StructuralItem{
	AssignedStructuralActivity: [RelConnectsStructuralActivity]!
}
type ProductDefinitionShape{
	ShapeOfProduct: [Product]!
	HasShapeAspects: [ShapeAspect]!
}
type SimpleProperty{

}
type PropertyEnumeration{
	Name: Label!
	EnumerationValues: [Value]!
	Unit: Unit!
}
type PropertyBoundedValue{
	UpperBoundValue: Value!
	LowerBoundValue: Value!
	Unit: Unit!
	SetPointValue: Value!
}
type PropertyDefinition{
	HasContext: [RelDeclares]!
	HasAssociations: [RelAssociates]!
}
type PropertyTemplateDefinition{

}
type PropertyDependencyRelationship{
	DependingProperty: Property!
	DependantProperty: Property!
	Expression: Text!
}
type PropertyEnumeratedValue{
	EnumerationValues: [Value]!
	EnumerationReference: PropertyEnumeration!
}
type PropertyListValue{
	ListValues: [Value]!
	Unit: Unit!
}
type PropertyReferenceValue{
	UsageName: Text!
	PropertyReference: ObjectReferenceSelect!
}
type PropertySet{
	HasProperties: [Property]!
}
type PropertySetTemplate{
	TemplateType: PropertySetTemplateType!
	ApplicableEntity: Identifier!
	HasPropertyTemplates: [PropertyTemplate]!
	Defines: [RelDefinesByTemplate]!
}
type PropertySingleValue{
	NominalValue: Value!
	Unit: Unit!
}
type PropertyTableValue{
	DefiningValues: [Value]!
	DefinedValues: [Value]!
	Expression: Text!
	DefiningUnit: Unit!
	DefinedUnit: Unit!
	CurveInterpolation: CurveInterpolation!
}
type SimplePropertyTemplate{
	TemplateType: SimplePropertyTemplateType!
	PrimaryMeasureType: Label!
	SecondaryMeasureType: Label!
	Enumerators: PropertyEnumeration!
	PrimaryUnit: Unit!
	SecondaryUnit: Unit!
	Expression: Label!
	AccessState: State!
}
type RectangleHollowProfileDef{
	WallThickness: PositiveLengthMeasure!
	InnerFilletRadius: NonNegativeLengthMeasure!
	OuterFilletRadius: NonNegativeLengthMeasure!
}
type RoundedRectangleProfileDef{
	RoundingRadius: PositiveLengthMeasure!
}
type RecurrencePattern{
	RecurrenceType: RecurrenceType!
	DayComponent: [DayInMonthNumber]!
	WeekdayComponent: [DayInWeekNumber]!
	MonthComponent: [MonthInYearNumber]!
	Position: Integer!
	Interval: Integer!
	Occurrences: Integer!
	TimePeriods: [TimePeriod]!
}
type Reference{
	TypeIdentifier: Identifier!
	AttributeIdentifier: Identifier!
	InstanceName: Label!
	ListPositions: [Integer]!
	InnerReference: Reference!
}
type RegularTimeSeries{
	TimeStep: TimeMeasure!
	Values: [TimeSeriesValue]!
}
type ReinforcingBar{
	NominalDiameter: PositiveLengthMeasure!
	CrossSectionArea: AreaMeasure!
	BarLength: PositiveLengthMeasure!
	PredefinedType: ReinforcingBarType!
	BarSurface: ReinforcingBarSurface!
}
type ReinforcingBarType{
	PredefinedType: ReinforcingBarType!
	NominalDiameter: PositiveLengthMeasure!
	CrossSectionArea: AreaMeasure!
	BarLength: PositiveLengthMeasure!
	BarSurface: ReinforcingBarSurface!
	BendingShapeCode: Label!
	BendingParameters: [BendingParameterSelect]!
}
type ReinforcingMesh{
	MeshLength: PositiveLengthMeasure!
	MeshWidth: PositiveLengthMeasure!
	LongitudinalBarNominalDiameter: PositiveLengthMeasure!
	TransverseBarNominalDiameter: PositiveLengthMeasure!
	LongitudinalBarCrossSectionArea: AreaMeasure!
	TransverseBarCrossSectionArea: AreaMeasure!
	LongitudinalBarSpacing: PositiveLengthMeasure!
	TransverseBarSpacing: PositiveLengthMeasure!
	PredefinedType: ReinforcingMeshType!
}
type Tendon{
	PredefinedType: TendonType!
	NominalDiameter: PositiveLengthMeasure!
	CrossSectionArea: AreaMeasure!
	TensionForce: ForceMeasure!
	PreStress: PressureMeasure!
	FrictionCoefficient: NormalisedRatioMeasure!
	AnchorageSlip: PositiveLengthMeasure!
	MinCurvatureRadius: PositiveLengthMeasure!
}
type TendonAnchor{
	PredefinedType: TendonAnchorType!
}
type ReinforcingMeshType{
	PredefinedType: ReinforcingMeshType!
	MeshLength: PositiveLengthMeasure!
	MeshWidth: PositiveLengthMeasure!
	LongitudinalBarNominalDiameter: PositiveLengthMeasure!
	TransverseBarNominalDiameter: PositiveLengthMeasure!
	LongitudinalBarCrossSectionArea: AreaMeasure!
	TransverseBarCrossSectionArea: AreaMeasure!
	LongitudinalBarSpacing: PositiveLengthMeasure!
	TransverseBarSpacing: PositiveLengthMeasure!
	BendingShapeCode: Label!
	BendingParameters: [BendingParameterSelect]!
}
type TendonAnchorType{
	PredefinedType: TendonAnchorType!
}
type TendonType{
	PredefinedType: TendonType!
	NominalDiameter: PositiveLengthMeasure!
	CrossSectionArea: AreaMeasure!
	SheathDiameter: PositiveLengthMeasure!
}
type RelAggregates{
	RelatingObject: ObjectDefinition!
	RelatedObjects: [ObjectDefinition]!
}
type RelDecomposes{

}
type RelAssigns{
	RelatedObjects: [ObjectDefinition]!
	RelatedObjectsType: ObjectType!
}
type RelAssignsToActor{
	RelatingActor: Actor!
	ActingRole: ActorRole!
}
type RelAssignsToControl{
	RelatingControl: Control!
}
type RelAssignsToGroup{
	RelatingGroup: Group!
}
type RelAssignsToProcess{
	RelatingProcess: ProcessSelect!
	QuantityInProcess: MeasureWithUnit!
}
type RelAssignsToProduct{
	RelatingProduct: ProductSelect!
}
type RelAssignsToResource{
	RelatingResource: ResourceSelect!
}
type Relationship{

}
type RelAssignsToGroupByFactor{
	Factor: RatioMeasure!
}
type RelAssociates{
	RelatedObjects: [DefinitionSelect]!
}
type RelAssociatesApproval{
	RelatingApproval: Approval!
}
type RelAssociatesClassification{
	RelatingClassification: ClassificationSelect!
}
type RelAssociatesConstraint{
	Intent: Label!
	RelatingConstraint: Constraint!
}
type RelAssociatesDocument{
	RelatingDocument: DocumentSelect!
}
type RelAssociatesLibrary{
	RelatingLibrary: LibrarySelect!
}
type RelAssociatesMaterial{
	RelatingMaterial: MaterialSelect!
}
type RelConnects{

}
type RelConnectsElements{
	ConnectionGeometry: ConnectionGeometry!
	RelatingElement: Element!
	RelatedElement: Element!
}
type RelConnectsPortToElement{
	RelatingPort: Port!
	RelatedElement: DistributionElement!
}
type RelConnectsPorts{
	RelatingPort: Port!
	RelatedPort: Port!
	RealizingElement: Element!
}
type RelConnectsStructuralActivity{
	RelatingElement: StructuralActivityAssignmentSelect!
	RelatedStructuralActivity: StructuralActivity!
}
type RelConnectsStructuralMember{
	RelatingStructuralMember: StructuralMember!
	RelatedStructuralConnection: StructuralConnection!
	AppliedCondition: BoundaryCondition!
	AdditionalConditions: StructuralConnectionCondition!
	SupportedLength: LengthMeasure!
	ConditionCoordinateSystem: Axis2Placement3D!
}
type RelContainedInSpatialStructure{
	RelatedElements: [Product]!
	RelatingStructure: SpatialElement!
}
type RelCoversBldgElements{
	RelatingBuildingElement: Element!
	RelatedCoverings: [Covering]!
}
type RelCoversSpaces{
	RelatingSpace: Space!
	RelatedCoverings: [Covering]!
}
type RelFillsElement{
	RelatingOpeningElement: OpeningElement!
	RelatedBuildingElement: Element!
}
type RelFlowControlElements{
	RelatedControlElements: [DistributionControlElement]!
	RelatingFlowElement: DistributionFlowElement!
}
type RelInterferesElements{
	RelatingElement: Element!
	RelatedElement: Element!
	InterferenceGeometry: ConnectionGeometry!
	InterferenceType: Identifier!
	ImpliedOrder: Boolean!
}
type RelReferencedInSpatialStructure{
	RelatedElements: [Product]!
	RelatingStructure: SpatialElement!
}
type RelSequence{
	RelatingProcess: Process!
	RelatedProcess: Process!
	TimeLag: LagTime!
	SequenceType: Sequence!
	UserDefinedSequenceType: Label!
}
type RelServicesBuildings{
	RelatingSystem: System!
	RelatedBuildings: [SpatialElement]!
}
type RelSpaceBoundary{
	RelatingSpace: SpaceBoundarySelect!
	RelatedBuildingElement: Element!
	ConnectionGeometry: ConnectionGeometry!
	PhysicalOrVirtualBoundary: PhysicalOrVirtual!
	InternalOrExternalBoundary: InternalOrExternal!
}
type RelConnectsPathElements{
	RelatingPriorities: [Integer]!
	RelatedPriorities: [Integer]!
	RelatedConnectionType: ConnectionType!
	RelatingConnectionType: ConnectionType!
}
type RelConnectsWithRealizingElements{
	RealizingElements: [Element]!
	ConnectionType: Label!
}
type RelConnectsWithEccentricity{
	ConnectionConstraint: ConnectionGeometry!
}
type RelDeclares{
	RelatingContext: Context!
	RelatedDefinitions: [DefinitionSelect]!
}
type RelNests{
	RelatingObject: ObjectDefinition!
	RelatedObjects: [ObjectDefinition]!
}
type RelProjectsElement{
	RelatingElement: Element!
	RelatedFeatureElement: FeatureElementAddition!
}
type RelVoidsElement{
	RelatingBuildingElement: Element!
	RelatedOpeningElement: FeatureElementSubtraction!
}
type RelDefines{

}
type RelDefinesByObject{
	RelatedObjects: [Object]!
	RelatingObject: Object!
}
type RelDefinesByProperties{
	RelatedObjects: [ObjectDefinition]!
	RelatingPropertyDefinition: PropertySetDefinitionSelect!
}
type RelDefinesByTemplate{
	RelatedPropertySets: [PropertySetDefinition]!
	RelatingTemplate: PropertySetTemplate!
}
type RelDefinesByType{
	RelatedObjects: [Object]!
	RelatingType: TypeObject!
}
type RelSpaceBoundary1stLevel{
	ParentBoundary: RelSpaceBoundary1stLevel!
	InnerBoundaries: [RelSpaceBoundary1stLevel]!
}
type RelSpaceBoundary2ndLevel{
	CorrespondingBoundary: RelSpaceBoundary2ndLevel!
	Corresponds: [RelSpaceBoundary2ndLevel]!
}
type Representation{
	ContextOfItems: RepresentationContext!
	RepresentationIdentifier: Label!
	RepresentationType: Label!
	Items: [RepresentationItem]!
	RepresentationMap: [RepresentationMap]!
	LayerAssignments: [PresentationLayerAssignment]!
	OfProductRepresentation: [ProductRepresentation]!
}
type ShapeModel{
	OfShapeAspect: [ShapeAspect]!
}
type StyleModel{

}
type StyledItem{
	Item: RepresentationItem!
	Styles: [StyleAssignmentSelect]!
	Name: Label!
}
type RepresentationMap{
	MappingOrigin: Axis2Placement!
	MappedRepresentation: Representation!
	HasShapeAspects: [ShapeAspect]!
	MapUsage: [MappedItem]!
}
type ResourceApprovalRelationship{
	RelatedResourceObjects: [ResourceObjectSelect]!
	RelatingApproval: Approval!
}
type ResourceConstraintRelationship{
	RelatingConstraint: Constraint!
	RelatedResourceObjects: [ResourceObjectSelect]!
}
type ResourceTime{
	ScheduleWork: Duration!
	ScheduleUsage: PositiveRatioMeasure!
	ScheduleStart: DateTime!
	ScheduleFinish: DateTime!
	ScheduleContour: Label!
	LevelingDelay: Duration!
	IsOverAllocated: Boolean!
	StatusTime: DateTime!
	ActualWork: Duration!
	ActualUsage: PositiveRatioMeasure!
	ActualStart: DateTime!
	ActualFinish: DateTime!
	RemainingWork: Duration!
	RemainingUsage: PositiveRatioMeasure!
	Completion: PositiveRatioMeasure!
}
type RevolvedAreaSolid{
	Axis: Axis1Placement!
	Angle: PlaneAngleMeasure!
	AxisLine: Line!
}
type RevolvedAreaSolidTapered{
	EndSweptArea: ProfileDef!
}
type TaskTime{
	DurationType: TaskDuration!
	ScheduleDuration: Duration!
	ScheduleStart: DateTime!
	ScheduleFinish: DateTime!
	EarlyStart: DateTime!
	EarlyFinish: DateTime!
	LateStart: DateTime!
	LateFinish: DateTime!
	FreeFloat: Duration!
	TotalFloat: Duration!
	IsCritical: Boolean!
	StatusTime: DateTime!
	ActualDuration: Duration!
	ActualStart: DateTime!
	ActualFinish: DateTime!
	RemainingTime: Duration!
	Completion: PositiveRatioMeasure!
}
type WorkTime{
	RecurrencePattern: RecurrencePattern!
	Start: Date!
	Finish: Date!
}
type SeamCurve{

}
type ShapeAspect{
	ShapeRepresentations: [ShapeModel]!
	Name: Label!
	Description: Text!
	ProductDefinitional: Logical!
	PartOfProductDefinitionShape: ProductRepresentationSelect!
}
type ShapeRepresentation{

}
type TopologyRepresentation{

}
type Site{
	RefLatitude: CompoundPlaneAngleMeasure!
	RefLongitude: CompoundPlaneAngleMeasure!
	RefElevation: LengthMeasure!
	LandTitleNumber: Label!
	SiteAddress: PostalAddress!
}
type SlabElementedCase{

}
type SlabStandardCase{

}
type SlippageConnectionCondition{
	SlippageX: LengthMeasure!
	SlippageY: LengthMeasure!
	SlippageZ: LengthMeasure!
}
type SweptDiskSolid{
	Directrix: Curve!
	Radius: PositiveLengthMeasure!
	InnerRadius: PositiveLengthMeasure!
	StartParam: ParameterValue!
	EndParam: ParameterValue!
}
type Space{
	PredefinedType: SpaceType!
	ElevationWithFlooring: LengthMeasure!
	HasCoverings: [RelCoversSpaces]!
	BoundedBy: [RelSpaceBoundary]!
}
type SpaceType{
	PredefinedType: SpaceType!
	LongName: Label!
}
type SpatialStructureElementType{

}
type SpatialZone{
	PredefinedType: SpatialZoneType!
}
type SpatialElementType{
	ElementType: Label!
}
type SpatialZoneType{
	PredefinedType: SpatialZoneType!
	LongName: Label!
}
type StructuralAction{
	DestabilizingLoad: Boolean!
}
type StructuralCurveAction{
	ProjectedOrTrue: ProjectedOrTrueLength!
	PredefinedType: StructuralCurveActivityType!
}
type StructuralPointAction{

}
type StructuralSurfaceAction{
	ProjectedOrTrue: ProjectedOrTrueLength!
	PredefinedType: StructuralSurfaceActivityType!
}
type StructuralReaction{

}
type StructuralAnalysisModel{
	PredefinedType: AnalysisModelType!
	OrientationOf2DPlane: Axis2Placement3D!
	LoadedBy: [StructuralLoadGroup]!
	HasResults: [StructuralResultGroup]!
	SharedPlacement: ObjectPlacement!
}
type StructuralConnection{
	AppliedCondition: BoundaryCondition!
	ConnectsStructuralMembers: [RelConnectsStructuralMember]!
}
type StructuralCurveConnection{
	Axis: Direction!
}
type StructuralPointConnection{
	ConditionCoordinateSystem: Axis2Placement3D!
}
type StructuralSurfaceConnection{

}
type StructuralLinearAction{

}
type StructuralCurveMember{
	PredefinedType: StructuralCurveMemberType!
	Axis: Direction!
}
type StructuralCurveMemberVarying{

}
type StructuralMember{
	ConnectedBy: [RelConnectsStructuralMember]!
}
type StructuralCurveReaction{
	PredefinedType: StructuralCurveActivityType!
}
type StructuralLoad{
	Name: Label!
}
type StructuralLoadConfiguration{
	Values: [StructuralLoadOrResult]!
	Locations: [[LengthMeasure]]!
}
type StructuralLoadOrResult{

}
type StructuralLoadCase{
	SelfWeightCoefficients: [RatioMeasure]!
}
type StructuralLoadLinearForce{
	LinearForceX: LinearForceMeasure!
	LinearForceY: LinearForceMeasure!
	LinearForceZ: LinearForceMeasure!
	LinearMomentX: LinearMomentMeasure!
	LinearMomentY: LinearMomentMeasure!
	LinearMomentZ: LinearMomentMeasure!
}
type StructuralLoadStatic{

}
type SurfaceReinforcementArea{
	SurfaceReinforcement1: [LengthMeasure]!
	SurfaceReinforcement2: [LengthMeasure]!
	ShearReinforcement: RatioMeasure!
}
type StructuralLoadPlanarForce{
	PlanarForceX: PlanarForceMeasure!
	PlanarForceY: PlanarForceMeasure!
	PlanarForceZ: PlanarForceMeasure!
}
type StructuralLoadSingleDisplacement{
	DisplacementX: LengthMeasure!
	DisplacementY: LengthMeasure!
	DisplacementZ: LengthMeasure!
	RotationalDisplacementRX: PlaneAngleMeasure!
	RotationalDisplacementRY: PlaneAngleMeasure!
	RotationalDisplacementRZ: PlaneAngleMeasure!
}
type StructuralLoadSingleDisplacementDistortion{
	Distortion: CurvatureMeasure!
}
type StructuralLoadSingleForce{
	ForceX: ForceMeasure!
	ForceY: ForceMeasure!
	ForceZ: ForceMeasure!
	MomentX: TorqueMeasure!
	MomentY: TorqueMeasure!
	MomentZ: TorqueMeasure!
}
type StructuralLoadSingleForceWarping{
	WarpingMoment: WarpingMomentMeasure!
}
type StructuralLoadTemperature{
	DeltaTConstant: ThermodynamicTemperatureMeasure!
	DeltaTY: ThermodynamicTemperatureMeasure!
	DeltaTZ: ThermodynamicTemperatureMeasure!
}
type StructuralSurfaceMember{
	PredefinedType: StructuralSurfaceMemberType!
	Thickness: PositiveLengthMeasure!
}
type StructuralPlanarAction{

}
type StructuralPointReaction{

}
type StructuralSurfaceReaction{
	PredefinedType: StructuralSurfaceActivityType!
}
type StructuralSurfaceMemberVarying{

}
type StyledRepresentation{

}
type SweptSurface{
	SweptCurve: ProfileDef!
	Position: Axis2Placement3D!
}
type SurfaceCurveSweptAreaSolid{
	Directrix: Curve!
	StartParam: ParameterValue!
	EndParam: ParameterValue!
	ReferenceSurface: Surface!
}
type SurfaceOfLinearExtrusion{
	ExtrudedDirection: Direction!
	Depth: LengthMeasure!
	ExtrusionAxis: Vector!
}
type SurfaceOfRevolution{
	AxisPosition: Axis1Placement!
	AxisLine: Line!
}
type SurfaceStyleRendering{
	DiffuseColour: ColourOrFactor!
	TransmissionColour: ColourOrFactor!
	DiffuseTransmissionColour: ColourOrFactor!
	ReflectionColour: ColourOrFactor!
	SpecularColour: ColourOrFactor!
	SpecularHighlight: SpecularHighlightSelect!
	ReflectanceMethod: ReflectanceMethod!
}
type SweptDiskSolidPolygonal{
	FilletRadius: PositiveLengthMeasure!
}
type Zone{
	LongName: Label!
}
type Table{
	Name: Label!
	Rows: [TableRow]!
	Columns: [TableColumn]!
	NumberOfCellsInRow: Integer!
	NumberOfHeadings: Integer!
	NumberOfDataRows: Integer!
}
type TableColumn{
	Identifier: Identifier!
	Name: Label!
	Description: Text!
	Unit: Unit!
	ReferencePath: Reference!
}
type TableRow{
	RowCells: [Value]!
	IsHeading: Boolean!
}
type TaskTimeRecurring{
	Recurrence: RecurrencePattern!
}
type TaskType{
	PredefinedType: TaskType!
	WorkMethod: Label!
}
type TriangulatedFaceSet{
	Normals: [[ParameterValue]]!
	Closed: Boolean!
	CoordIndex: [[PositiveInteger]]!
	PnIndex: [PositiveInteger]!
	NumberOfTriangles: Integer!
}
type TextLiteralWithExtent{
	Extent: PlanarExtent!
	BoxAlignment: BoxAlignment!
}
type TextureCoordinateGenerator{
	Mode: Label!
	Parameter: [Real]!
}
type TextureMap{
	Vertices: [TextureVertex]!
	MappedTo: Face!
}
type TimePeriod{
	StartTime: Time!
	EndTime: Time!
}
type TimeSeriesValue{
	ListValues: [Value]!
}
type Vertex{

}
type WindowStyle{
	ConstructionType: WindowStyleConstruction!
	OperationType: WindowStyleOperation!
	ParameterTakesPrecedence: Boolean!
	Sizeable: Boolean!
}
type UnitAssignment{
	Units: [Unit]!
}
type VertexPoint{
	VertexGeometry: Point!
}
type VirtualGridIntersection{
	IntersectingAxes: [GridAxis]!
	OffsetDistances: [LengthMeasure]!
}
type WallElementedCase{

}
type WallStandardCase{

}
type WindowStandardCase{

}
type WorkPlan{
	PredefinedType: WorkPlanType!
}
type WorkSchedule{
	PredefinedType: WorkScheduleType!
}